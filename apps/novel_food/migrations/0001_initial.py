# Generated by Django 4.2.13 on 2024-06-18 08:21

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("administrative", "0001_initial"),
        ("taxonomies", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Allergenicity",
            fields=[
                (
                    "id",
                    models.AutoField(
                        db_column="id_allergenicity", primary_key=True, serialize=False
                    ),
                ),
                ("title", models.CharField(max_length=255)),
            ],
            options={
                "verbose_name": "Allergenicity",
                "verbose_name_plural": "ðŸ“‚ Allergenicity",
                "db_table": "ALLERGENICITY",
            },
        ),
        migrations.CreateModel(
            name="AllergenicityNovelFood",
            fields=[
                (
                    "id",
                    models.AutoField(
                        db_column="id_allergenicity_novel_food",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "allergenicity",
                    models.ForeignKey(
                        db_column="id_allergenicity",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="novel_food.allergenicity",
                        verbose_name="Allergenicity",
                    ),
                ),
            ],
            options={
                "verbose_name": "Allergenicity Assignment",
                "verbose_name_plural": "Allergenicity Assignments",
                "db_table": "ALLERGENICITY_NOVEL_FOOD",
            },
        ),
        migrations.CreateModel(
            name="Category",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=255)),
                ("definition", models.TextField(blank=True, null=True)),
                (
                    "regulation",
                    models.ForeignKey(
                        blank=True,
                        db_column="id_regulation",
                        help_text="(LEGREF vocab)",
                        limit_choices_to={"taxonomy__code": "LEGREF"},
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="taxonomies.taxonomynode",
                    ),
                ),
            ],
            options={
                "verbose_name": "Novel Food Category",
                "verbose_name_plural": "ðŸ“‚ NF Categories",
                "db_table": "SUB_TYPE",
            },
        ),
        migrations.CreateModel(
            name="Chemical",
            fields=[
                (
                    "id",
                    models.AutoField(
                        db_column="id_com", primary_key=True, serialize=False
                    ),
                ),
            ],
            options={
                "verbose_name": "Chemicals",
                "verbose_name_plural": "ðŸ“‚ CHEMICALS",
                "db_table": "COMPONENT",
            },
        ),
        migrations.CreateModel(
            name="ChemicalType",
            fields=[
                (
                    "id",
                    models.AutoField(
                        db_column="id_component_type", primary_key=True, serialize=False
                    ),
                ),
                ("title", models.CharField(max_length=255)),
                ("definition", models.TextField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "Chemical type (future use)",
                "verbose_name_plural": "ðŸ“‚ Chemical types (future use)",
                "db_table": "COM_TYPE",
            },
        ),
        migrations.CreateModel(
            name="Family",
            fields=[
                (
                    "id",
                    models.AutoField(
                        db_column="id_family", primary_key=True, serialize=False
                    ),
                ),
                ("title", models.CharField(max_length=255, unique=True)),
            ],
            options={
                "verbose_name": "Family (taxonomy)",
                "verbose_name_plural": "ðŸ“‚ Families (taxonomy)",
                "db_table": "FAMILY",
            },
        ),
        migrations.CreateModel(
            name="FoodCategory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=255)),
                ("definition", models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                "verbose_name": "Food category",
                "verbose_name_plural": "ðŸ“‚ Food categories",
            },
        ),
        migrations.CreateModel(
            name="GenotoxFinalOutcome",
            fields=[
                (
                    "id",
                    models.AutoField(
                        db_column="id_genotox_final_outcome",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("title", models.CharField(blank=True, max_length=255)),
            ],
            options={
                "verbose_name": "Genotoxicity final outcome",
                "verbose_name_plural": "Genotoxicity final outcomes",
                "db_table": "GENOTOX_FINAL_OUTCOME",
            },
        ),
        migrations.CreateModel(
            name="Genus",
            fields=[
                (
                    "id",
                    models.AutoField(
                        db_column="id_genus", primary_key=True, serialize=False
                    ),
                ),
                ("title", models.CharField(max_length=255, unique=True)),
                (
                    "family",
                    models.ForeignKey(
                        db_column="id_family",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="novel_food.family",
                    ),
                ),
            ],
            options={
                "verbose_name": "Genus (taxonomy)",
                "verbose_name_plural": "ðŸ“‚ Genera (taxonomy)",
                "db_table": "GENUS",
            },
        ),
        migrations.CreateModel(
            name="NovelFood",
            fields=[
                (
                    "id",
                    models.AutoField(
                        db_column="id_study", primary_key=True, serialize=False
                    ),
                ),
                ("title", models.CharField(max_length=255, verbose_name="NF Name")),
                (
                    "nf_code",
                    models.CharField(
                        blank=True, max_length=255, null=True, verbose_name="NF Code"
                    ),
                ),
                ("shelflife_value", models.FloatField(blank=True, null=True)),
                (
                    "outcome",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("negative", "Negative"),
                            ("partially_negative", "Partially Negative"),
                            ("positive", "Positive"),
                        ],
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "outcome_remarks",
                    models.TextField(
                        blank=True,
                        help_text="explanation in case the Outcome is 'Partially Negative'",
                        null=True,
                    ),
                ),
                (
                    "allergenicity",
                    models.ManyToManyField(
                        related_name="allergenicity_novel_foods",
                        through="novel_food.AllergenicityNovelFood",
                        to="novel_food.allergenicity",
                    ),
                ),
                (
                    "antinutritional_factors",
                    models.ForeignKey(
                        blank=True,
                        db_column="id_antinutritional_factors",
                        help_text="(YESNO vocab)",
                        limit_choices_to={"taxonomy__code": "YESNO"},
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="antinutritional_factors_novel_foods",
                        to="taxonomies.taxonomynode",
                        verbose_name="Antinutritional factors",
                    ),
                ),
                (
                    "endocrine_disrupt_prop",
                    models.ForeignKey(
                        blank=True,
                        db_column="id_has_endocrine_disrupt_prop",
                        help_text="(YESNO vocab)",
                        limit_choices_to={"taxonomy__code": "YESNO"},
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="endocrine_disrupt_prop_novel_foods",
                        to="taxonomies.taxonomynode",
                        verbose_name="has endocrine disrupt properties",
                    ),
                ),
                (
                    "food_category",
                    models.ForeignKey(
                        blank=True,
                        db_column="id_food_category",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="food_category_novel_foods",
                        to="novel_food.foodcategory",
                    ),
                ),
                (
                    "food_matrices",
                    models.ForeignKey(
                        blank=True,
                        db_column="id_is_food_matrices",
                        help_text="Were food matrices provided? (YESNO vocab)",
                        limit_choices_to={"taxonomy__code": "YESNO"},
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="food_matrices_novel_foods",
                        to="taxonomies.taxonomynode",
                    ),
                ),
                (
                    "genotox_final_outcome",
                    models.ForeignKey(
                        blank=True,
                        db_column="id_is_genotoxic",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="genotox_final_outcome_novel_foods",
                        to="novel_food.genotoxfinaloutcome",
                    ),
                ),
                (
                    "instability_concerns",
                    models.ForeignKey(
                        blank=True,
                        db_column="id_instability_concerns",
                        help_text="(YESNO vocab)",
                        limit_choices_to={"taxonomy__code": "YESNO"},
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="instability_concerns_novel_foods",
                        to="taxonomies.taxonomynode",
                    ),
                ),
            ],
            options={
                "verbose_name": "Novel Food",
                "verbose_name_plural": "Novel Foods ðŸ¥¬",
                "db_table": "STUDY",
            },
        ),
        migrations.CreateModel(
            name="Organism",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "genus",
                    models.ForeignKey(
                        blank=True,
                        db_column="id_genus",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="novel_food.genus",
                    ),
                ),
                (
                    "vocab_id",
                    models.ForeignKey(
                        help_text="(MTX vocab)",
                        limit_choices_to={"taxonomy__code": "MTX"},
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="vocab_id_organisms",
                        to="taxonomies.taxonomynode",
                        verbose_name="Organism vocabulary identification",
                    ),
                ),
            ],
            options={
                "verbose_name": "Organism",
                "verbose_name_plural": "ðŸ“‚ ORGANISMS",
                "db_table": "ORGANISM",
            },
        ),
        migrations.CreateModel(
            name="OrgType",
            fields=[
                (
                    "id",
                    models.AutoField(
                        db_column="id_org_type", primary_key=True, serialize=False
                    ),
                ),
                ("title", models.CharField(max_length=255, unique=True)),
            ],
            options={
                "verbose_name": "Organism Type (taxonomy)",
                "verbose_name_plural": "ðŸ“‚ Organism Types (taxonomy)",
                "db_table": "ORG_TYPE",
            },
        ),
        migrations.CreateModel(
            name="StructureReported",
            fields=[
                (
                    "id",
                    models.AutoField(
                        db_column="id_structure_reported",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("title", models.CharField(max_length=255)),
                ("definition", models.TextField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "Structure reported (future use)",
                "verbose_name_plural": "ðŸ“‚ Structures reported (future use)",
                "db_table": "COM_STRUCTURE_SHOWN",
            },
        ),
        migrations.CreateModel(
            name="SynonymType",
            fields=[
                (
                    "id_synonym_type",
                    models.AutoField(primary_key=True, serialize=False),
                ),
                (
                    "synonym_type",
                    models.CharField(
                        help_text="Type of synonym -e.g. common name, trade name, synonym",
                        max_length=255,
                    ),
                ),
                ("definition", models.TextField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "Synonym Type",
                "verbose_name_plural": "ðŸ“‚ Synonym types",
                "db_table": "SYNONYM",
            },
        ),
        migrations.CreateModel(
            name="SubstanceOfConcernNovelFood",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "novel_food",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="novel_food.novelfood",
                    ),
                ),
                (
                    "substance_of_concern",
                    models.ForeignKey(
                        blank=True,
                        db_column="id_sub_of_concern",
                        help_text="(PARAM vocab)",
                        limit_choices_to={"taxonomy__code": "PARAM"},
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="substance_of_concern_substance_of_concern_novel_foods",
                        to="taxonomies.taxonomynode",
                    ),
                ),
            ],
            options={
                "verbose_name": "Substance of concern",
                "verbose_name_plural": "Substances of concern",
                "db_table": "SUBSTANCE_OF_CONCERN_STUDY",
            },
        ),
        migrations.CreateModel(
            name="OrganismSyn",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("synonym", models.CharField(max_length=255)),
                (
                    "organism",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="novel_food.organism",
                    ),
                ),
                (
                    "type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="novel_food.synonymtype",
                    ),
                ),
            ],
            options={
                "verbose_name": "Organism synonym",
                "db_table": "ORG_SYN",
            },
        ),
        migrations.CreateModel(
            name="NutritionalDisadvantage",
            fields=[
                (
                    "id",
                    models.AutoField(
                        db_column="id_nutri_disadvantage",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("explanation", models.TextField(blank=True, null=True)),
                (
                    "yes_no",
                    models.ForeignKey(
                        blank=True,
                        db_column="is_yn",
                        help_text="(YESNO vocab)",
                        limit_choices_to={"taxonomy__code": "YESNO"},
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="yes_no_nutritional_disadvantages",
                        to="taxonomies.taxonomynode",
                    ),
                ),
            ],
            options={
                "verbose_name": "Nutritional Disadvantage",
                "db_table": "NUTRITIONAL_DISADVANTAGE",
            },
        ),
        migrations.CreateModel(
            name="NovelFoodSyn",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("novel_food_synonym", models.CharField(max_length=255)),
                (
                    "novel_food",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="novel_food.novelfood",
                    ),
                ),
                (
                    "type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="novel_food.synonymtype",
                    ),
                ),
            ],
            options={
                "verbose_name": "Novel food synonym",
                "db_table": "STUDY_SYN",
            },
        ),
        migrations.CreateModel(
            name="NovelFoodOrganism",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "variant",
                    models.CharField(
                        blank=True,
                        help_text="STRAIN if microorganism / VARIETY if plant / "
                        "SUBSPECIES if animal / CEll_TYPE if cell culture",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "cell_culture",
                    models.ForeignKey(
                        blank=True,
                        db_column="id_cell_culture",
                        help_text="(STRAIN vocab)",
                        limit_choices_to={"taxonomy__code": "STRAIN"},
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="cell_culture_novel_foods",
                        to="taxonomies.taxonomynode",
                    ),
                ),
                (
                    "has_qps",
                    models.ForeignKey(
                        blank=True,
                        db_column="id_has_qps",
                        help_text="Has qualified presumption of safety? (YESNO vocab)",
                        limit_choices_to={"taxonomy__code": "YESNO"},
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="has_qps_novel_foods",
                        to="taxonomies.taxonomynode",
                        verbose_name="has QPS",
                    ),
                ),
                (
                    "is_cell_culture_modified",
                    models.ForeignKey(
                        blank=True,
                        db_column="id_is_cell_culture_modified",
                        help_text="Is the cell culture modified? (YESNO vocab)",
                        limit_choices_to={"taxonomy__code": "YESNO"},
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="is_cell_culture_modified_novel_foods",
                        to="taxonomies.taxonomynode",
                        verbose_name="is the cell culture modified",
                    ),
                ),
                (
                    "is_gmo",
                    models.ForeignKey(
                        blank=True,
                        db_column="id_is_gmo",
                        help_text="Is the organism genetically modified? (YESNO vocab)",
                        limit_choices_to={"taxonomy__code": "YESNO"},
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="is_gmo_novel_foods",
                        to="taxonomies.taxonomynode",
                        verbose_name="is GMO",
                    ),
                ),
                (
                    "novel_food",
                    models.ForeignKey(
                        db_column="id_study",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="novel_food.novelfood",
                    ),
                ),
                (
                    "org_part",
                    models.ForeignKey(
                        blank=True,
                        db_column="id_org_part",
                        help_text="(MTX vocab)",
                        limit_choices_to={"taxonomy__code": "MTX"},
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="org_part_novel_foods",
                        to="taxonomies.taxonomynode",
                    ),
                ),
                (
                    "organism",
                    models.ForeignKey(
                        db_column="id_organism",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="novel_food.organism",
                    ),
                ),
            ],
            options={
                "verbose_name": "Organism Identity of Novel food",
                "db_table": "STUDY_ORG",
            },
        ),
        migrations.CreateModel(
            name="NovelFoodChemical",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "chemical",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="novel_food.chemical",
                    ),
                ),
                (
                    "novel_food",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="novel_food.novelfood",
                    ),
                ),
            ],
            options={
                "verbose_name": "Chemical identity of Novel food",
                "db_table": "STUDY_COM",
            },
        ),
        migrations.CreateModel(
            name="NovelFoodCategory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "category",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="novel_food.category",
                    ),
                ),
                (
                    "novel_food",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="novel_food.novelfood",
                    ),
                ),
            ],
            options={
                "verbose_name": "Novel Food Category",
                "verbose_name_plural": "Novel Food Categories",
                "db_table": "STUDY_SUB_TYPE",
            },
        ),
        migrations.AddField(
            model_name="novelfood",
            name="nutritional_disadvantage",
            field=models.OneToOneField(
                blank=True,
                db_column="id_nutri_disadvantage",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="nutritional_disadvantage_novel_foods",
                to="novel_food.nutritionaldisadvantage",
            ),
        ),
        migrations.AddField(
            model_name="novelfood",
            name="opinion",
            field=models.ForeignKey(
                db_column="id_op",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="opinion_novel_foods",
                to="administrative.opinion",
            ),
        ),
        migrations.AddField(
            model_name="novelfood",
            name="protein_digestibility",
            field=models.ForeignKey(
                blank=True,
                db_column="id_protein_digestibility",
                help_text="(YESNO vocab)",
                limit_choices_to={"taxonomy__code": "YESNO"},
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="protein_digestibility_novel_foods",
                to="taxonomies.taxonomynode",
                verbose_name="Protein digestibility",
            ),
        ),
        migrations.AddField(
            model_name="novelfood",
            name="shelflife_unit",
            field=models.ForeignKey(
                blank=True,
                db_column="id_shelflife_unit",
                help_text="use full name (e.g. 'gram' not 'g'). (UNIT vocab)",
                limit_choices_to={"taxonomy__code": "UNIT"},
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="shelflife_unit_novel_foods",
                to="taxonomies.taxonomynode",
            ),
        ),
        migrations.AddField(
            model_name="novelfood",
            name="specific_toxicity",
            field=models.ForeignKey(
                blank=True,
                db_column="id_toxicity",
                help_text="if novel food has specific toxicity, specify which one. (TOXICITY vocab)",
                limit_choices_to={"taxonomy__code": "TOXICITY"},
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="specific_toxicity_novel_foods",
                to="taxonomies.taxonomynode",
                verbose_name="Specific Toxicity",
            ),
        ),
        migrations.AddField(
            model_name="novelfood",
            name="sufficient_data",
            field=models.ForeignKey(
                blank=True,
                db_column="id_is_sufficient_data",
                help_text="Were sufficient data provided? (YESNO vocab)",
                limit_choices_to={"taxonomy__code": "YESNO"},
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="sufficient_data_novel_foods",
                to="taxonomies.taxonomynode",
            ),
        ),
        migrations.AddField(
            model_name="novelfood",
            name="tox_study_required",
            field=models.ForeignKey(
                blank=True,
                db_column="id_tox_study_required",
                help_text="(YESNO vocab)",
                limit_choices_to={"taxonomy__code": "YESNO"},
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="tox_study_required_novel_foods",
                to="taxonomies.taxonomynode",
                verbose_name="Tox study required",
            ),
        ),
        migrations.AddField(
            model_name="novelfood",
            name="vocab_id",
            field=models.ForeignKey(
                blank=True,
                db_column="id_rms_efsa",
                help_text="If missing in vocabulary, move on, do not add into vocab. (PARAM vocab)",
                limit_choices_to={"taxonomy__code": "PARAM"},
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="vocab_id_novel_foods",
                to="taxonomies.taxonomynode",
                verbose_name="NovelFood vocabulary identification",
            ),
        ),
        migrations.CreateModel(
            name="HBGV",
            fields=[
                (
                    "id",
                    models.AutoField(
                        db_column="id_hbgv", primary_key=True, serialize=False
                    ),
                ),
                (
                    "exceeded_for_population",
                    models.ForeignKey(
                        blank=True,
                        db_column="id_age",
                        help_text="Population for which the HBGV is exceeded",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="population_hbgvs",
                        to="taxonomies.population",
                    ),
                ),
                (
                    "novel_food",
                    models.ForeignKey(
                        db_column="id_study",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="novel_food_hbgvs",
                        to="novel_food.novelfood",
                    ),
                ),
                (
                    "substance",
                    models.ForeignKey(
                        blank=True,
                        db_column="id_substance",
                        help_text="(PARAM vocab)",
                        limit_choices_to={"taxonomy__code": "PARAM"},
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="substance_hbgvs",
                        to="taxonomies.taxonomynode",
                    ),
                ),
                (
                    "type",
                    models.ForeignKey(
                        blank=True,
                        db_column="id_type",
                        help_text="(ENDPOINT_HGV vocab)",
                        limit_choices_to={"taxonomy__code": "ENDPOINT_HGV"},
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="type_hbgvs",
                        to="taxonomies.taxonomynode",
                    ),
                ),
            ],
            options={
                "verbose_name": "Health-Based Guidence Value",
                "verbose_name_plural": "Health-Based Guidence Values",
            },
        ),
        migrations.AddField(
            model_name="family",
            name="org_type",
            field=models.ForeignKey(
                db_column="id_org_type",
                on_delete=django.db.models.deletion.CASCADE,
                to="novel_food.orgtype",
                verbose_name="Organism Type",
            ),
        ),
        migrations.CreateModel(
            name="ChemicalSyn",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("synonym", models.CharField(max_length=255)),
                (
                    "chemical",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="novel_food.chemical",
                    ),
                ),
                (
                    "type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="novel_food.synonymtype",
                    ),
                ),
            ],
            options={
                "verbose_name": "Chemical synonym",
                "db_table": "COM_SYN",
            },
        ),
        migrations.AddField(
            model_name="chemical",
            name="chemical_type",
            field=models.ForeignKey(
                blank=True,
                db_column="component_type",
                help_text="The majority of the chemical types are extracted from the "
                "OECD picklist(OECD 2012). More on the purpose of this field: 2013:EN-458 page:20",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="novel_food.chemicaltype",
            ),
        ),
        migrations.AddField(
            model_name="chemical",
            name="structure_reported",
            field=models.ForeignKey(
                blank=True,
                help_text="This field is used to indicate what type of "
                "structure (either SMILES or InChI) is reported. For example: the structure of "
                "the compound itself, the structure of the monomer if the compound is a "
                "polymer, the structure of an isomer, or no structure at all.",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="novel_food.structurereported",
            ),
        ),
        migrations.AddField(
            model_name="chemical",
            name="vocab_id",
            field=models.ForeignKey(
                db_column="id_rnc_efsa",
                help_text="(PARAM vocab)",
                limit_choices_to={"taxonomy__code": "PARAM"},
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="vocab_id_chemicals",
                to="taxonomies.taxonomynode",
                verbose_name="Chemical vocabulary identification",
            ),
        ),
        migrations.CreateModel(
            name="ChemDescriptor",
            fields=[
                (
                    "id",
                    models.AutoField(
                        db_column="id_chem_descriptor",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("otherNames", "Other Names"),
                            ("IUPAC", "IUPAC Name"),
                            ("MOLECULAR_FORMULA", "Molecular Formula"),
                            ("CAS", "CAS Number"),
                            ("SMILES_NOTATION", "SMILES Notation"),
                            ("INCHI", "InChI"),
                            ("zooLabel", "Zoo Label"),
                            ("category", "Category"),
                            ("pestClass", "Pesticide Class"),
                            ("detailLevel", "Detail Level"),
                            (
                                "COM_ECSUBINVENTENTRYREF",
                                "COM EC Subinventory Entry Reference",
                            ),
                            ("FLAVIS_NUMBER", "Flavis Number"),
                        ],
                        max_length=255,
                    ),
                ),
                ("value", models.CharField(max_length=255)),
                (
                    "chemical",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="chem_descriptors",
                        to="novel_food.chemical",
                    ),
                ),
            ],
            options={
                "verbose_name": "Custom Descriptor",
                "db_table": "CHEM_DESCRIPTOR",
            },
        ),
        migrations.CreateModel(
            name="BackgroundExposureAssessment",
            fields=[
                (
                    "id",
                    models.AutoField(
                        db_column="id_bg_exp_assessment",
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "comp_of_interest",
                    models.ForeignKey(
                        blank=True,
                        db_column="id_comp_of_interest",
                        help_text="Compound of interest (PARAM vocab)",
                        limit_choices_to={"taxonomy__code": "PARAM"},
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="comp_of_interest_bg_expo_assessments",
                        to="taxonomies.taxonomynode",
                    ),
                ),
                (
                    "novel_food",
                    models.ForeignKey(
                        db_column="id_study",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="novel_food_bg_expo_assessments",
                        to="novel_food.novelfood",
                    ),
                ),
            ],
            options={
                "verbose_name": "Background exposure assessment",
                "db_table": "BG_EXPO_ASSESSMENT",
            },
        ),
        migrations.AddField(
            model_name="allergenicitynovelfood",
            name="novel_food",
            field=models.ForeignKey(
                db_column="id_study",
                on_delete=django.db.models.deletion.CASCADE,
                to="novel_food.novelfood",
                verbose_name="Novel Food",
            ),
        ),
    ]
