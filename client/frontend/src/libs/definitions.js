export const objectTypes = {
  allergenicities: {
    displayName: 'Allergenicity'
  },
  synonyms: {
    displayName: 'Novel Food Synonym'
  },
  panels: {
    displayName: 'Panel'
  },
  sciOfficers: {
    displayName: 'Scientific Officer'
  },
  questions: {
    displayName: 'Question'
  },
  'questions.applicants': {
    displayName: 'Applicant'
  },
  'questions.mandates': {
    displayName: 'Mandate'
  },
  foodCategories: {
    displayName: 'Food Category'
  },
  novelFoodCategories: {
    displayName: 'Novel Food Category'
  },
  admes: {
    displayName: 'ADME'
  },
  'admes.investigationTypes': {
    displayName: 'Investigation Type'
  },
  genotoxes: {
    displayName: 'Genotox'
  },
  endpointstudies: {
    displayName: 'Endpoint Study'
  },
  'endpointstudies.endpoints': {
    displayName: 'Endpoint'
  },
  'endpointstudies.endpoints.finalOutcomes': {
    displayName: 'Final Outcome'
  },
  'endpointstudies.endpoints.finalOutcomes.populations': {
    displayName: 'Population'
  },
  novelFoodVariants: {
    displayName: 'Novel Food Variant'
  },
  'novelFoodVariants.riskAssessRedFlags': {
    displayName: 'Risk Assessment Red Flag'
  },
  'novelFoodVariants.productionProcesses': {
    displayName: 'Production Process'
  },
  'novelFoodVariants.proposedUses': {
    displayName: 'Proposed Use'
  },
  'novelFoodVariants.proposedUses.population': {
    displayName: 'Proposed Uses Population'
  },
  'novelFoodVariants.compositions': {
    displayName: 'Composition'
  },
  'organisms': {
    displayName: 'Organism'
  },
  'organisms.species': {
    displayName: 'Taxonomy'
  },
  'organisms.orgSynonyms': {
    displayName: 'Organism Synonym'
  },
  'chemicals': {
    displayName: 'Chemical'
  },
  'chemicals.chemSynonyms': {
    displayName: 'Chemical Synonym'
  },
  'chemicals.chemDescriptors': {
    displayName: 'Chemical Descriptor'
  },

}

export const fields = {
  // novel food

  novelFoodId: {
    displayName: 'ID',
    flattenedDisplayName: 'Novel Food ID',
    displayGroupName: 'Novel Food',
    type: 'number',
    qualifiers: ['is', 'is greater than', 'is less than'],
    icon: 'mdi-numeric',
    filterDescription: 'description for ID',
    tooltipDescription: 'ID tooltip description',
    showInFilters: false
  },

  nfCode: {
    displayName: 'Code',
    flattenedDisplayName: 'Novel Food Code',
    displayGroupName: 'Novel Food',
    type: 'text',
    djangoLookupField: 'nf_code',
    qualifiers: ['contains', 'is', 'is None'],
    icon: 'mdi-rice',
    filterDescription: 'description for Code',
    tooltipDescription: 'Code tooltip description',
    showInFilters: true
  },
  title: {
    displayName: 'Title',
    flattenedDisplayName: 'Novel Food Title',
    displayGroupName: 'Novel Food',
    type: 'text',
    djangoLookupField: 'title',
    qualifiers: ['contains', 'is', 'is None'],
    icon: 'mdi-rice',
    filterDescription: 'description for Title',
    tooltipDescription: 'Title tooltip description',
    showInFilters: true
  },
  toxStudyRequired: {
    displayName: 'Toxicology Study Required',
    displayGroupName: 'Toxicology',
    type: 'text',
    apiEndpoint: 'novel-food-values-list/',
    djangoApp: 'novel_food',
    djangoModel: 'NovelFood',
    djangoField: 'tox_study_required',
    djangoLookupField: 'tox_study_required',
    qualifiers: ['is', 'is None'],
    icon: 'mdi-flask-outline',
    filterDescription: 'description for Toxicology Study Required',
    tooltipDescription: 'Toxicology Study Required tooltip description',
    showInFilters: true
  },
  genotoxFinalOutcome: {
    displayName: 'Genotoxicity Final Outcome',
    displayGroupName: 'Novel Food',
    type: 'text',
    apiEndpoint: 'novel-food-values-list/',
    djangoApp: 'novel_food',
    djangoModel: 'GenotoxFinalOutcome',
    djangoField: 'title',
    djangoLookupField: 'genotox_final_outcome__title',
    qualifiers: ['is', 'is None'],
    icon: 'mdi-dna',
    filterDescription: 'description for Genotoxicity Final Outcome',
    tooltipDescription: 'Genotoxicity Final Outcome tooltip description',
    showInFilters: true
  },
  finalToxicologyRemarks: {
    displayName: 'Final Toxicology Remarks',
    displayGroupName: 'Novel Food',
    type: 'text',
    djangoLookupField: 'final_toxicology_remarks__text_field',
    qualifiers: ['contains', 'is', 'is None'],
    icon: 'mdi-comment-text-outline',
    filterDescription: 'description for Final Toxicology Remarks',
    tooltipDescription: 'Final Toxicology Remarks tooltip description',
    showInFilters: true
  },
  proteinDigestibility: {
    displayName: 'Protein Digestibility',
    displayGroupName: 'Novel Food',
    type: 'text',
    djangoLookupField: 'protein_digestibility__tax_node',
    apiEndpoint: 'novel-food-values-list/',
    djangoApp: 'taxonomies',
    djangoModel: 'TaxonomyNode',
    djangoField: 'short_name',
    djangoLimitchoicesApp: 'novel_food',
    djangoLimitchoicesModel: 'NovelFood',
    djangoLimitchoicesField: 'protein_digestibility',
    qualifiers: ['is', 'is None'],
    icon: 'mdi-food-drumstick-outline',
    filterDescription: 'description for Protein Digestibility',
    tooltipDescription: 'Protein Digestibility tooltip description',
    showInFilters: true
  },
  antinutritionalFactors: {
    displayName: 'Antinutritional Factors',
    displayGroupName: 'Novel Food',
    type: 'text',
    djangoLookupField: 'antinutritional_factors__tax_node',
    apiEndpoint: 'novel-food-values-list/',
    djangoApp: 'taxonomies',
    djangoModel: 'TaxonomyNode',
    djangoField: 'short_name',
    djangoLimitchoicesApp: 'novel_food',
    djangoLimitchoicesModel: 'NovelFood',
    djangoLimitchoicesField: 'antinutritional_factors',
    qualifiers: ['is', 'is None'],
    icon: 'mdi-scale-balance',
    filterDescription: 'description for Antinutritional Factors',
    tooltipDescription: 'Antinutritional Factors tooltip description',
    showInFilters: true
  },
  hasNutriDisadvantage: {
    displayName: 'Nutritional Disadvantage',
    displayGroupName: 'Novel Food',
    type: 'text',
    djangoLookupField: 'has_nutri_disadvantage__tax_node',
    apiEndpoint: 'novel-food-values-list/',
    djangoApp: 'taxonomies',
    djangoModel: 'TaxonomyNode',
    djangoField: 'short_name',
    djangoLimitchoicesApp: 'novel_food',
    djangoLimitchoicesModel: 'NovelFood',
    djangoLimitchoicesField: 'has_nutri_disadvantage',
    qualifiers: ['is', 'is None'],
    icon: 'mdi-scale-balance',
    filterDescription: 'description for Nutritional Disadvantage',
    tooltipDescription: 'Nutritional Disadvantage tooltip description',
    showInFilters: true
  },
  nutriDisadvantageExplanation: {
    displayName: 'Nutritional Disadvantage Explanation',
    displayGroupName: 'Novel Food',
    type: 'text',
    djangoLookupField: 'nutri_disadvantage_explanation__text_field',
    qualifiers: ['contains', 'is', 'is None'],
    icon: 'mdi-text-box-outline',
    filterDescription: 'description for Nutritional Disadvantage Explanation',
    tooltipDescription: 'Nutritional Disadvantage Explanation tooltip description',
    showInFilters: true
  },
  sufficientData: {
    displayName: 'Sufficient Data',
    displayGroupName: 'Novel Food',
    flattenedDisplayName: 'Stability - Sufficient Data',
    type: 'text',
    djangoLookupField: 'sufficient_data__tax_node',
    apiEndpoint: 'novel-food-values-list/',
    djangoApp: 'taxonomies',
    djangoModel: 'TaxonomyNode',
    djangoField: 'short_name',
    djangoLimitchoicesApp: 'novel_food',
    djangoLimitchoicesModel: 'NovelFood',
    djangoLimitchoicesField: 'sufficient_data',
    qualifiers: ['is', 'is None'],
    icon: 'mdi-database-check',
    filterDescription: 'description for Sufficient Data',
    tooltipDescription: 'Sufficient Data tooltip description',
    showInFilters: true
  },
  foodMatrices: {
    displayName: 'Food Matrices',
    displayGroupName: 'Stability',
    flattenedDisplayName: 'Stability - Food Matrices',
    type: 'text',
    djangoLookupField: 'food_matrices__tax_node',
    apiEndpoint: 'novel-food-values-list/',
    djangoApp: 'taxonomies',
    djangoModel: 'TaxonomyNode',
    djangoField: 'short_name',
    djangoLimitchoicesApp: 'novel_food',
    djangoLimitchoicesModel: 'NovelFood',
    djangoLimitchoicesField: 'food_matrices',
    qualifiers: ['is', 'is None'],
    icon: 'mdi-grid',
    filterDescription: 'description for Food Matrices',
    tooltipDescription: 'Food Matrices tooltip description',
    showInFilters: true
  },
  instabilityConcerns: {
    displayName: 'Instability Concerns',
    displayGroupName: 'Novel Food',
    type: 'text',
    djangoLookupField: 'instability_concerns__tax_node',
    apiEndpoint: 'novel-food-values-list/',
    djangoApp: 'taxonomies',
    djangoModel: 'TaxonomyNode',
    djangoField: 'short_name',
    djangoLimitchoicesApp: 'novel_food',
    djangoLimitchoicesModel: 'NovelFood',
    djangoLimitchoicesField: 'instability_concerns',
    qualifiers: ['is', 'is None'],
    icon: 'mdi-alert-outline',
    filterDescription: 'description for Instability Concerns',
    tooltipDescription: 'Instability Concerns tooltip description',
    showInFilters: true
  },
  shelflifeValue: {
    displayName: 'Shelf Life Value',
    displayGroupName: 'Novel Food',
    type: 'number',
    djangoLookupField: 'shelflife_value',
    qualifiers: ['is', 'is greater than', 'is less than', 'is None'],
    icon: 'mdi-clock-outline',
    filterDescription: 'description for Shelf Life Value',
    tooltipDescription: 'Shelf Life Value tooltip description',
    showInFilters: true
  },
  shelflifeUnit: {
    displayName: 'Shelf Life Unit',
    displayGroupName: 'Novel Food',
    type: 'text',
    djangoLookupField: 'shelflife_unit__tax_node',
    apiEndpoint: 'novel-food-values-list/',
    djangoApp: 'taxonomies',
    djangoModel: 'TaxonomyNode',
    djangoField: 'short_name',
    djangoLimitchoicesApp: 'novel_food',
    djangoLimitchoicesModel: 'NovelFood',
    djangoLimitchoicesField: 'shelflife_unit',
    qualifiers: ['is', 'is None'],
    icon: 'mdi-timer-sand',
    filterDescription: 'description for Shelf Life Unit',
    tooltipDescription: 'Shelf Life Unit tooltip description',
    showInFilters: true
  },
  endocrineDisruptProp: {
    displayName: 'Endocrine Disruptive Properties',
    displayGroupName: 'Novel Food',
    type: 'text',
    djangoLookupField: 'endocrine_disrupt_prop__tax_node',
    apiEndpoint: 'novel-food-values-list/',
    djangoApp: 'taxonomies',
    djangoModel: 'TaxonomyNode',
    djangoField: 'short_name',
    djangoLimitchoicesApp: 'novel_food',
    djangoLimitchoicesModel: 'NovelFood',
    djangoLimitchoicesField: 'endocrine_disrupt_prop',
    qualifiers: ['is', 'is None'],
    icon: 'mdi-alert-outline',
    filterDescription: 'description for Endocrine Disruptive Properties',
    tooltipDescription: 'Endocrine Disruptive Properties tooltip description',
    showInFilters: true
  },
  outcome: {
    displayName: 'Outcome',
    flattenedDisplayName: 'Novel Food Outcome',
    displayGroupName: 'Novel Food',
    type: 'text',
    apiEndpoint: 'novel-food-values-list/',
    djangoApp: 'novel_food',
    djangoModel: 'NovelFood',
    djangoField: 'outcome',
    djangoLookupField: 'outcome',
    qualifiers: ['is', 'is None'],
    icon: 'mdi-check-circle-outline',
    filterDescription: 'description for Outcome',
    tooltipDescription: 'Outcome tooltip description',
    showInFilters: true
  },
  outcomeRemarks: {
    displayName: 'Outcome Remarks',
    flattenedDisplayName: 'Novel Food Outcome Remarks',
    displayGroupName: 'Novel Food',
    type: 'text',
    djangoLookupField: 'outcome_remarks__text_field',
    qualifiers: ['contains', 'is', 'is None'],
    icon: 'mdi-comment-text-outline',
    filterDescription: 'description for Outcome Remarks',
    tooltipDescription: 'Outcome Remarks tooltip description',
    showInFilters: true
  },
  vocabId: {
    displayName: 'Vocabulary Name',
    flattenedDisplayName: 'Novel Food Vocabulary Name',
    displayGroupName: 'Novel Food',
    type: 'text',
    djangoLookupField: 'vocab_id__tax_node',
    apiEndpoint: 'novel-food-values-list/',
    djangoApp: 'taxonomies',
    djangoModel: 'TaxonomyNode',
    djangoField: 'short_name',
    djangoLimitchoicesApp: 'novel_food',
    djangoLimitchoicesModel: 'NovelFood',
    djangoLimitchoicesField: 'vocab_id',
    qualifiers: ['is', 'is None'],
    icon: 'mdi-book-open-outline',
    filterDescription: 'description for Vocabulary Name',
    tooltipDescription: 'Vocabulary Name tooltip description',
    showInFilters: true
  },

  'allergenicities.title': {
    displayName: '',
    flattenedDisplayName: 'Allergenicity',
    displayGroupName: 'Allergenicity',
    type: 'text',
    djangoLookupField: 'allergenicities__allergenicity__title',
    apiEndpoint: 'novel-food-values-list/',
    djangoApp: 'novel_food',
    djangoModel: 'Allergenicity',
    djangoField: 'title',
    qualifiers: ['is', 'is None'],
    icon: 'mdi-alert-circle-outline',
    filterDescription: 'description for Allergenicity',
    tooltipDescription: 'Allergenicity tooltip description',
    showInFilters: true
  },

  // Novel Food Synonyms

  'synonyms.title': {
    displayName: 'Name',
    flattenedDisplayName: 'Novel Food Synonym',
    displayGroupName: 'Synonym',
    type: 'text',
    djangoLookupField: 'synonyms__title',
    apiEndpoint: 'novel-food-values-list/',
    djangoApp: 'novel_food',
    djangoModel: 'NovelFoodSyn',
    djangoField: 'title',
    qualifiers: ['is', 'is None'],
    icon: '',
    filterDescription: 'description for Novel Food Synonym',
    tooltipDescription: 'Novel Food Synonym tooltip description',
    showInFilters: true
  },
  'synonyms.typeTitle': {
    displayName: 'Type',
    flattenedDisplayName: 'Novel Food Synonym Type',
    displayGroupName: 'Synonym',
    type: 'text',
    djangoLookupField: 'synonyms__syn_type__title',
    apiEndpoint: 'novel-food-values-list/',
    djangoApp: 'novel_food',
    djangoModel: 'SynonymType',
    djangoField: 'title',
    qualifiers: ['is', 'is None'],
    icon: '',
    filterDescription: 'description for Novel Food Synonym Type',
    tooltipDescription: 'Novel Food Synonym Type tooltip description',
    showInFilters: true
  },
  'synonyms.typeDefinition': {
    displayName: 'Type Definition',
    flattenedDisplayName: 'Novel Food Synonym Type Definition',
    displayGroupName: 'Synonym',
    type: 'text',
    djangoLookupField: 'synonyms__syn_type__definition',
    qualifiers: ['contains', 'is', 'is None'],
    icon: '',
    filterDescription: 'description for Novel Food Synonym Type Definition',
    tooltipDescription: 'Novel Food ∂nym Type Definition tooltip description',
    showInFilters: true
  },

  // opinion

  opinionDocumentType: {
    displayName: 'Opinion Document Type',
    displayGroupName: 'Opinion',
    type: 'text',
    djangoLookupField: 'opinion__document_type__tax_node',
    apiEndpoint: 'novel-food-values-list/',
    djangoApp: 'taxonomies',
    djangoModel: 'TaxonomyNode',
    djangoField: 'short_name',
    djangoLimitchoicesApp: 'administrative',
    djangoLimitchoicesModel: 'Opinion',
    djangoLimitchoicesField: 'document_type',
    qualifiers: ['is', 'is None'],
    icon: 'mdi-file-document-outline',
    filterDescription: 'description for Opinion Document Type',
    tooltipDescription: 'Opinion Document Type tooltip description',
    showInFilters: true
  },
  opinionTitle: {
    displayName: 'Opinion Title',
    displayGroupName: 'Opinion',
    type: 'text',
    djangoLookupField: 'opinion__title',
    qualifiers: ['contains', 'is', 'is None'],
    icon: 'mdi-file-document-outline',
    filterDescription: 'description for Opinion Title',
    tooltipDescription: 'Opinion Title tooltip description',
    showInFilters: true
  },
  opinionDoi: {
    displayName: 'Opinion DOI',
    displayGroupName: 'Opinion',
    type: 'text',
    djangoLookupField: 'opinion__doi',
    qualifiers: ['contains', 'is', 'is None'],
    icon: 'mdi-file-document-outline',
    filterDescription: 'description for Opinion DOI',
    tooltipDescription: 'Opinion DOI tooltip description',
    showInFilters: true
  },
  opinionUrl: {
    displayName: 'Opinion URL',
    displayGroupName: 'Opinion',
    type: 'text',
    djangoLookupField: 'opinion__url',
    qualifiers: ['contains', 'is', 'is None'],
    icon: 'mdi-file-document-outline',
    filterDescription: 'description for Opinion URL',
    tooltipDescription: 'Opinion URL tooltip description',
    showInFilters: true
  },
  opinionPublicationDate: {
    displayName: 'Opinion Publication Date',
    displayGroupName: 'Opinion',
    type: 'date',
    djangoLookupField: 'opinion__publication_date',
    qualifiers: ['is before', 'is after', 'is', 'is None'],
    icon: 'mdi-file-document-outline',
    filterDescription: 'description for Opinion Publication Date',
    tooltipDescription: 'Opinion Publication Date tooltip description',
    showInFilters: true
  },
  opinionAdoptionDate: {
    displayName: 'Opinion Adoption Date',
    displayGroupName: 'Opinion',
    type: 'date',
    djangoLookupField: 'opinion__adoption_date',
    qualifiers: ['is before', 'is after', 'is', 'is None'],
    icon: 'mdi-file-document-outline',
    filterDescription: 'description for Opinion Adoption Date',
    tooltipDescription: 'Opinion Adoption Date tooltip description',
    showInFilters: true
  },

  'panels.title': {
    displayName: 'Name',
    flattenedDisplayName: 'Panel',
    displayGroupName: 'Administrative',
    type: 'text',
    djangoLookupField: 'opinion__panels__panel__title',
    apiEndpoint: 'novel-food-values-list/',
    djangoApp: 'administrative',
    djangoModel: 'Panel',
    djangoField: 'title',
    qualifiers: ['is', 'is None'],
    icon: 'mdi-file-document-outline',
    filterDescription: "description for Panel's Name",
    tooltipDescription: "Panel's Name tooltip description",
    showInFilters: true
  },

  'sciOfficers.firstName': {
    displayName: 'First Name',
    flattenedDisplayName: "Scientific Officer's First Name",
    displayGroupName: 'Administrative',
    type: 'text',
    djangoLookupField: 'opinion__sci_officers__sci_officer__first_name',
    qualifiers: ['contains', 'is', 'is None'],
    icon: 'mdi-file-document-outline',
    filterDescription: "description for Scientific Officer's First Name",
    tooltipDescription: "Scientific Officer's First Name tooltip description",
    showInFilters: true
  },
  'sciOfficers.middleName': {
    displayName: 'Middle Name',
    flattenedDisplayName: "Scientific officer's Middle Name",
    displayGroupName: 'Administrative',
    type: 'text',
    djangoLookupField: 'opinion__sci_officers__sci_officer__middle_name',
    qualifiers: ['contains', 'is', 'is None'],
    icon: 'mdi-file-document-outline',
    filterDescription: "description for scientific officer's Middle Name",
    tooltipDescription: "Scientific officer's Middle Name tooltip description",
    showInFilters: true
  },
  'sciOfficers.lastName': {
    displayName: 'Last Name',
    flattenedDisplayName: "Scientific officer's Last Name",
    displayGroupName: 'Administrative',
    type: 'text',
    djangoLookupField: 'opinion__sci_officers__sci_officer__last_name',
    qualifiers: ['contains', 'is', 'is None'],
    icon: 'mdi-file-document-outline',
    filterDescription: "description for scientific officer's Last Name",
    tooltipDescription: "Scientific officer's Last Name tooltip description",
    showInFilters: true
  },

  // question

  'questions.number': {
    displayName: 'Number',
    flattenedDisplayName: 'Question Number',
    displayGroupName: 'Question',
    type: 'text',
    djangoLookupField: 'opinion__questions__question__number',
    qualifiers: ['contains', 'is', 'is None'],
    icon: 'mdi-file-document-outline',
    filterDescription: 'description for Number',
    tooltipDescription: 'Number tooltip description',
    showInFilters: true
  },

  'questions.applicants.title': {
    displayName: 'Name',
    flattenedDisplayName: 'Applicant',
    displayGroupName: 'Applicant',
    djangoLookupField: 'opinion__questions__question__applicants__applicant__title',
    type: 'text',
    qualifiers: ['contains', 'is', 'is None'],
    icon: 'mdi-file-document-outline',
    filterDescription: 'description for applicant title',
    tooltipDescription: 'Applicant title tooltip description',
    showInFilters: true
  },

  'questions.mandates.mandateTypeTitle': {
    displayName: 'Type',
    flattenedDisplayName: 'Mandate Type',
    displayGroupName: 'Mandate',
    type: 'text',
    djangoLookupField: 'opinion__questions__question__mandates__mandate_type__title',
    apiEndpoint: 'novel-food-values-list/',
    djangoApp: 'administrative',
    djangoModel: 'MandateType',
    djangoField: 'title',
    qualifiers: ['is', 'is None'],
    icon: 'mdi-file-document-outline',
    filterDescription: 'description for Mandate Type',
    tooltipDescription: 'Mandate Type tooltip description',
    showInFilters: true
  },
  'questions.mandates.mandateTypeDefinition': {
    displayName: 'Type Definition',
    flattenedDisplayName: 'Mandate Type Definition',
    displayGroupName: 'Mandate',
    type: 'text',
    djangoLookupField:
      'opinion__questions__question__mandates__mandate_type__definition__text_field',
    qualifiers: ['contains', 'is', 'is None'],
    icon: 'mdi-file-document-outline',
    filterDescription: 'description for Mandate Type Definition',
    tooltipDescription: 'Mandate Type Definition tooltip description',
    showInFilters: true
  },
  'questions.mandates.regulation': {
    displayName: 'Regulation',
    flattenedDisplayName: 'Mandate Regulation',
    displayGroupName: 'Mandate',
    type: 'text',
    djangoLookupField: 'opinion__questions__question__mandates__regulation__tax_node',
    apiEndpoint: 'novel-food-values-list/',
    djangoApp: 'taxonomies',
    djangoModel: 'TaxonomyNode',
    djangoField: 'short_name',
    djangoLimitchoicesApp: 'administrative',
    djangoLimitchoicesModel: 'Mandate',
    djangoLimitchoicesField: 'regulation',
    qualifiers: ['is', 'is None'],
    icon: 'mdi-file-document-outline',
    filterDescription: 'description for Mandate Regulation',
    tooltipDescription: 'Mandate Regulation tooltip description',
    showInFilters: true
  },

  'foodCategories.title': {
    displayName: 'Name',
    flattenedDisplayName: 'Food Category Name',
    displayGroupName: 'Novel Food',
    type: 'text',
    djangoLookupField: 'food_categories__food_category__title',
    apiEndpoint: 'novel-food-values-list/',
    djangoApp: 'novel_food',
    djangoModel: 'FoodCategory',
    djangoField: 'title',
    qualifiers: ['is', 'is None'],
    icon: 'mdi-alert-circle-outline',
    filterDescription: 'description for Food Category Name',
    tooltipDescription: 'Food Category Name tooltip description',
    showInFilters: true
  },
  'foodCategories.definition': {
    displayName: 'Definition',
    flattenedDisplayName: 'Food Category Definition',
    displayGroupName: 'Novel Food',
    type: 'text',
    djangoLookupField: 'food_categories__food_category__definition__text_field',
    qualifiers: ['contains', 'is', 'is None'],
    icon: 'mdi-alert-circle-outline',
    filterDescription: 'description for Food Category Definition',
    tooltipDescription: 'Food Category Definition tooltip description',
    showInFilters: true
  },

  'novelFoodCategories.title': {
    displayName: 'Name',
    flattenedDisplayName: 'Novel Food Category',
    displayGroupName: 'Novel Food',
    type: 'text',
    djangoLookupField: 'novel_food_categories__novel_food_category__title',
    apiEndpoint: 'novel-food-values-list/',
    djangoApp: 'novel_food',
    djangoModel: 'NovelFoodCategory',
    djangoField: 'title',
    qualifiers: ['is', 'is None'],
    icon: 'mdi-alert-circle-outline',
    filterDescription: 'description for Novel Food Category',
    tooltipDescription: 'Novel Food Category tooltip description',
    showInFilters: true
  },
  'novelFoodCategories.definition': {
    displayName: 'Definition',
    flattenedDisplayName: 'Novel Food Category Definition',
    displayGroupName: 'Novel Food',
    type: 'text',
    djangoLookupField: 'novel_food_categories__novel_food_category__definition__text_field',
    qualifiers: ['contains', 'is', 'is None'],
    icon: 'mdi-alert-circle-outline',
    filterDescription: 'description for Novel Food Category Definition',
    tooltipDescription: 'Novel Food Category Definition tooltip description',
    showInFilters: true
  },
  'novelFoodCategories.regulation': {
    displayName: 'Regulation',
    flattenedDisplayName: 'Novel Food Category Regulation',
    displayGroupName: 'Novel Food',
    type: 'text',
    djangoLookupField: 'novel_food_categories__novel_food_category__regulation__tax_node',
    apiEndpoint: 'novel-food-values-list/',
    djangoApp: 'taxonomies',
    djangoModel: 'TaxonomyNode',
    djangoField: 'short_name',
    djangoLimitchoicesApp: 'novel_food',
    djangoLimitchoicesModel: 'NovelFoodCategory',
    djangoLimitchoicesField: 'regulation',
    qualifiers: ['is', 'is None'],
    icon: 'mdi-file-document-outline',
    filterDescription: 'description for Novel Food Category regulation',
    tooltipDescription: 'Novel Food Category regulation tooltip description',
    showInFilters: true
  },

  // identities


  'organisms.organism': {
    displayName: 'Vocab ID',
    flattenedDisplayName: 'Organism Vocab ID',
    displayGroupName: 'Identity',
    type: 'text',
    djangoLookupField: 'organisms__organism__vocab_id__tax_node',
    apiEndpoint: 'novel-food-values-list/',
    djangoApp: 'taxonomies',
    djangoModel: 'TaxonomyNode',
    djangoField: 'short_name',
    djangoLimitchoicesApp: 'novel_food',
    djangoLimitchoicesModel: 'Organism',
    djangoLimitchoicesField: 'vocab_id',
    qualifiers: ['is', 'is None'],
    icon: '',
    filterDescription: 'description for Organism Vocab ID',
    tooltipDescription: 'Organism Vocab ID tooltip description',
    showInFilters: true
  },
  'organisms.orgPart': {
    displayName: 'Part',
    flattenedDisplayName: 'Organism Part',
    displayGroupName: 'Identity',
    type: 'text',
    djangoLookupField: 'organisms__org_part__tax_node',
    apiEndpoint: 'novel-food-values-list/',
    djangoApp: 'taxonomies',
    djangoModel: 'TaxonomyNode',
    djangoField: 'short_name',
    djangoLimitchoicesApp: 'novel_food',
    djangoLimitchoicesModel: 'NovelFoodOrganism',
    djangoLimitchoicesField: 'org_part',
    qualifiers: ['is', 'is None'],
    icon: '',
    filterDescription: 'description for Organism Part',
    tooltipDescription: 'Organism Part tooltip description',
    showInFilters: true
  },
  'organisms.variant': {
    displayName: 'Variant',
    flattenedDisplayName: 'Organism Variant',
    displayGroupName: 'Identity',
    type: 'text',
    djangoLookupField: 'organisms__variant',
    apiEndpoint: 'novel-food-values-list/',
    djangoApp: 'novel_food',
    djangoModel: 'NovelFoodOrganism',
    djangoField: 'variant',
    qualifiers: ['is', 'is None'],
    icon: '',
    filterDescription: 'description for Organism Variant',
    tooltipDescription: 'Organism Variant tooltip description',
    showInFilters: true
  },
  'organisms.isGmo': {
    displayName: 'is GMO',
    flattenedDisplayName: 'Organism is GMO',
    displayGroupName: 'Identity',
    type: 'text',
    djangoLookupField: 'organisms__is_gmo__tax_node',
    apiEndpoint: 'novel-food-values-list/',
    djangoApp: 'taxonomies',
    djangoModel: 'TaxonomyNode',
    djangoField: 'short_name',
    djangoLimitchoicesApp: 'novel_food',
    djangoLimitchoicesModel: 'NovelFoodOrganism',
    djangoLimitchoicesField: 'is_gmo',
    qualifiers: ['is', 'is None'],
    icon: '',
    filterDescription: 'description for Organism is GMO',
    tooltipDescription: 'Organism is GMO tooltip description',
    showInFilters: true
  },
  'organisms.hasQps': {
    displayName: 'has QPS',
    flattenedDisplayName: 'Organism has QPS',
    displayGroupName: 'Identity',
    type: 'text',
    djangoLookupField: 'organisms__has_qps__tax_node',
    apiEndpoint: 'novel-food-values-list/',
    djangoApp: 'taxonomies',
    djangoModel: 'TaxonomyNode',
    djangoField: 'short_name',
    djangoLimitchoicesApp: 'novel_food',
    djangoLimitchoicesModel: 'NovelFoodOrganism',
    djangoLimitchoicesField: 'has_qps',
    qualifiers: ['is', 'is None'],
    icon: '',
    filterDescription: 'description for Organism has QPS',
    tooltipDescription: 'Organism has QPS tooltip description',
    showInFilters: true
  },

  'organisms.cellCulture': {
    displayName: 'Cell Culture',
    flattenedDisplayName: 'Organism Cell Culture',
    displayGroupName: 'Identity',
    type: 'text',
    djangoLookupField: 'organisms__cell_culture',
    apiEndpoint: 'novel-food-values-list/',
    djangoApp: 'novel_food',
    djangoModel: 'NovelFoodOrganism',
    djangoField: 'cell_culture',
    qualifiers: ['is', 'is None'],
    icon: '',
    filterDescription: 'description for Organism Cell Culture',
    tooltipDescription: 'Organism Cell Culture tooltip description',
    showInFilters: true
  },

  'organisms.cellsModified': {
    displayName: 'Cells Modified',
    flattenedDisplayName: 'Organism Cell Modification',
    displayGroupName: 'Identity',
    type: 'text',
    djangoLookupField: 'organisms__cells_modified__tax_node',
    apiEndpoint: 'novel-food-values-list/',
    djangoApp: 'taxonomies',
    djangoModel: 'TaxonomyNode',
    djangoField: 'short_name',
    djangoLimitchoicesApp: 'novel_food',
    djangoLimitchoicesModel: 'NovelFoodOrganism',
    djangoLimitchoicesField: 'cells_modified',
    qualifiers: ['is', 'is None'],
    icon: '',
    filterDescription: 'description for Organism Cell Modification',
    tooltipDescription: 'Organism Cell Modification tooltip description',
    showInFilters: true
  },
  'organisms.species.name': {
    displayName: 'Species Name',
    flattenedDisplayName: 'Species Name',
    displayGroupName: 'Identity',
    type: 'text',
    djangoLookupField: 'organisms__organism__species__name',
    apiEndpoint: 'novel-food-values-list/',
    djangoApp: 'novel_food',
    djangoModel: 'Species',
    djangoField: 'name',
    qualifiers: ['is', 'is None'],
    icon: '',
    filterDescription: 'description for Species Name',
    tooltipDescription: 'Species Name tooltip description',
    showInFilters: true
  },
  'organisms.species.scientificName': {
    displayName: 'Scientific Name',
    flattenedDisplayName: 'Species Scientific Name',
    displayGroupName: 'Identity',
    type: 'text',
    djangoLookupField: 'organisms__organism__species__scientific_name',
    apiEndpoint: 'novel-food-values-list/',
    djangoApp: 'novel_food',
    djangoModel: 'Species',
    djangoField: 'scientific_name',
    qualifiers: ['is', 'is None'],
    icon: '',
    filterDescription: 'description for Species Scientific Name',
    tooltipDescription: 'Species Scientific Name tooltip description',
    showInFilters: true
  },
  'organisms.species.genus': {
    displayName: 'Genus',
    flattenedDisplayName: 'Species Genus',
    displayGroupName: 'Identity',
    type: 'text',
    djangoLookupField: 'organisms__organism__species__genus__title',
    apiEndpoint: 'novel-food-values-list/',
    djangoApp: 'novel_food',
    djangoModel: 'Genus',
    djangoField: 'title',
    qualifiers: ['is', 'is None'],
    icon: '',
    filterDescription: 'description for Species Genus',
    tooltipDescription: 'Species Genus tooltip description',
    showInFilters: true
  },
  'organisms.species.family': {
    displayName: 'Family',
    flattenedDisplayName: 'Species Family',
    displayGroupName: 'Identity',
    type: 'text',
    djangoLookupField: 'organisms__organism__species__genus__family__title',
    apiEndpoint: 'novel-food-values-list/',
    djangoApp: 'novel_food',
    djangoModel: 'Family',
    djangoField: 'title',
    qualifiers: ['is', 'is None'],
    icon: '',
    filterDescription: 'description for Species Family',
    tooltipDescription: 'Species Family tooltip description',
    showInFilters: true
  },
  'organisms.species.orgType': {
    displayName: 'Organism Type',
    flattenedDisplayName: 'Species Organism Type',
    displayGroupName: 'Identity',
    type: 'text',
    djangoLookupField: 'organisms__organism__species__genus__family__org_type__title',
    apiEndpoint: 'novel-food-values-list/',
    djangoApp: 'novel_food',
    djangoModel: 'OrgType',
    djangoField: 'title',
    qualifiers: ['is', 'is None'],
    icon: '',
    filterDescription: 'description for Species Organism Type',
    tooltipDescription: 'Species Organism Type tooltip description',
    showInFilters: true
  },
  'organisms.orgSynonyms.title': {
    displayName: 'Name',
    flattenedDisplayName: 'Organism Synonym',
    displayGroupName: 'Synonym',
    type: 'text',
    djangoLookupField: 'organisms__organism__synonyms__title',
    apiEndpoint: 'novel-food-values-list/',
    djangoApp: 'novel_food',
    djangoModel: 'OrganismSyn',
    djangoField: 'title',
    qualifiers: ['is', 'is None'],
    icon: '',
    filterDescription: 'description for Organism Synonym',
    tooltipDescription: 'Organism Synonym tooltip description',
    showInFilters: true
  },
  'organisms.orgSynonyms.typeTitle': {
    displayName: 'Type',
    flattenedDisplayName: 'Organism Synonym Type',
    displayGroupName: 'Synonym',
    type: 'text',
    djangoLookupField: 'organisms__organism__synonyms__syn_type__title',
    apiEndpoint: 'novel-food-values-list/',
    djangoApp: 'novel_food',
    djangoModel: 'SynonymType',
    djangoField: 'title',
    qualifiers: ['is', 'is None'],
    icon: '',
    filterDescription: 'description for Organism Synonym Type',
    tooltipDescription: 'Organism Synonym Type tooltip description',
    showInFilters: true
  },
  'organisms.orgSynonyms.typeDefinition': {
    displayName: 'Type Definition',
    flattenedDisplayName: 'Organism Synonym Type Definition',
    displayGroupName: 'Synonym',
    type: 'text',
    djangoLookupField: 'organisms__organism__synonyms__syn_type__definition',
    qualifiers: ['contains', 'is', 'is None'],
    icon: '',
    filterDescription: 'description for Organism Synonym Type Definition',
    tooltipDescription: 'Organism ∂nym Type Definition tooltip description',
    showInFilters: true
  },

  'chemicals.chemical': {
    displayName: 'Vocab ID',
    flattenedDisplayName: 'Chemical Vocab ID',
    displayGroupName: 'Identity',
    type: 'text',
    djangoLookupField: 'chemicals__chemical__vocab_id__tax_node',
    apiEndpoint: 'novel-food-values-list/',
    djangoApp: 'taxonomies',
    djangoModel: 'TaxonomyNode',
    djangoField: 'short_name',
    djangoLimitchoicesApp: 'novel_food',
    djangoLimitchoicesModel: 'Chemical',
    djangoLimitchoicesField: 'vocab_id',
    qualifiers: ['is', 'is None'],
    icon: '',
    filterDescription: 'description for Chemical Vocab ID',
    tooltipDescription: 'Chemical Vocab ID tooltip description',
    showInFilters: true
  },
  'chemicals.chemSynonyms.title': {
    displayName: 'Name',
    flattenedDisplayName: 'Chemical Synonym',
    displayGroupName: 'Synonym',
    type: 'text',
    djangoLookupField: 'chemicals__chemical__synonyms__title',
    apiEndpoint: 'novel-food-values-list/',
    djangoApp: 'novel_food',
    djangoModel: 'ChemicalSyn',
    djangoField: 'title',
    qualifiers: ['is', 'is None'],
    icon: '',
    filterDescription: 'description for Chemical Synonym',
    tooltipDescription: 'Chemical Synonym tooltip description',
    showInFilters: true
  },
  'chemicals.chemSynonyms.typeTitle': {
    displayName: 'Type',
    flattenedDisplayName: 'Chemical Synonym Type',
    displayGroupName: 'Synonym',
    type: 'text',
    djangoLookupField: 'chemicals__chemical__synonyms__syn_type__title',
    apiEndpoint: 'novel-food-values-list/',
    djangoApp: 'novel_food',
    djangoModel: 'SynonymType',
    djangoField: 'title',
    qualifiers: ['is', 'is None'],
    icon: '',
    filterDescription: 'description for Chemical Synonym Type',
    tooltipDescription: 'Chemical Synonym Type tooltip description',
    showInFilters: true
  },
  'chemicals.chemSynonyms.typeDefinition': {
    displayName: 'Type Definition',
    flattenedDisplayName: 'Chemical Synonym Type Definition',
    displayGroupName: 'Synonym',
    type: 'text',
    djangoLookupField: 'chemicals__chemical__synonyms__syn_type__definition',
    qualifiers: ['contains', 'is', 'is None'],
    icon: '',
    filterDescription: 'description for Chemical Synonym Type Definition',
    tooltipDescription: 'Chemical ∂nym Type Definition tooltip description',
    showInFilters: true
  },
  'chemicals.chemDescriptors.type': {
    displayName: 'Type',
    flattenedDisplayName: 'Chemical Descriptor Type',
    displayGroupName: 'Chemical',
    type: 'text',
    djangoLookupField: 'chemicals__chemical__chem_descriptors__type',
    apiEndpoint: 'novel-food-values-list/',
    djangoApp: 'novel_food',
    djangoModel: 'ChemDescriptor',
    djangoField: 'type',
    qualifiers: ['is', 'is None'],
    icon: '',
    filterDescription: 'description for Chemical Descriptor Type',
    tooltipDescription: 'Chemical Descriptor Type tooltip description',
    showInFilters: true
  },
  'chemicals.chemDescriptors.value': {
    displayName: 'Value',
    flattenedDisplayName: 'Chemical Descriptor Value',
    displayGroupName: 'Chemical',
    type: 'text',
    djangoLookupField: 'chemicals__chemical__chem_descriptors__value',
    qualifiers: ['contains', 'is', 'is None'],
    icon: '',
    filterDescription: 'description for Chemical Descriptor Value',
    tooltipDescription: 'Chemical Descriptor Value tooltip description',
    showInFilters: true
  },


  // adme

  'admes.testType': {
    displayName: 'Test Type',
    flattenedDisplayName: 'ADME Test Type',
    displayGroupName: 'ADME',
    type: 'text',
    djangoLookupField: 'adme__test_type__tax_node',
    apiEndpoint: 'novel-food-values-list/',
    djangoApp: 'taxonomies',
    djangoModel: 'TaxonomyNode',
    djangoField: 'short_name',
    djangoLimitchoicesApp: 'studies',
    djangoLimitchoicesModel: 'ADME',
    djangoLimitchoicesField: 'test_type',
    qualifiers: ['is', 'is None'],
    icon: 'mdi-flask-outline',
    filterDescription: 'description for Test Type',
    tooltipDescription: 'Test Type tooltip description',
    showInFilters: true
  },
  'admes.guideline': {
    displayName: 'Guideline',
    flattenedDisplayName: 'ADME Guideline',
    displayGroupName: 'ADME',
    type: 'text',
    djangoLookupField: 'adme__guideline__tax_node',
    apiEndpoint: 'novel-food-values-list/',
    djangoApp: 'taxonomies',
    djangoModel: 'TaxonomyNode',
    djangoField: 'short_name',
    djangoLimitchoicesApp: 'studies',
    djangoLimitchoicesModel: 'ADME',
    djangoLimitchoicesField: 'guideline',
    qualifiers: ['is', 'is None'],
    icon: 'mdi-book-open-outline',
    filterDescription: 'description for Guideline',
    tooltipDescription: 'Guideline tooltip description',
    showInFilters: true
  },
  'admes.guidelineQualifier': {
    displayName: 'Guideline Qualifier',
    flattenedDisplayName: 'ADME Guideline Qualifier',
    displayGroupName: 'ADME',
    type: 'text',
    djangoLookupField: 'adme__guideline_qualifier__title',
    apiEndpoint: 'novel-food-values-list/',
    djangoApp: 'taxonomies',
    djangoModel: 'GuidelineQualifier',
    djangoField: 'title',
    qualifiers: ['is', 'is None'],
    icon: 'mdi-book-open-outline',
    filterDescription: 'description for Guideline Qualifier',
    tooltipDescription: 'Guideline Qualifier tooltip description',
    showInFilters: true
  },
  'admes.studySource': {
    displayName: 'Study Source',
    flattenedDisplayName: 'ADME Study Source',
    displayGroupName: 'ADME',
    type: 'text',
    djangoLookupField: 'adme__study_source__title',
    apiEndpoint: 'novel-food-values-list/',
    djangoApp: 'studies',
    djangoModel: 'StudySource',
    djangoField: 'title',
    qualifiers: ['is', 'is None'],
    icon: 'mdi-book-outline',
    filterDescription: 'description for Study Source',
    tooltipDescription: 'Study Source tooltip description',
    showInFilters: true
  },

  'admes.investigationTypes.title': {
    displayName: 'Name',
    flattenedDisplayName: 'ADME Investigation Type',
    displayGroupName: 'ADME',
    type: 'text',
    djangoLookupField: 'adme__investigation_types__investigation_type__title',
    apiEndpoint: 'novel-food-values-list/',
    djangoApp: 'studies',
    djangoModel: 'InvestigationType',
    djangoField: 'title',
    qualifiers: ['is', 'is None'],
    icon: 'mdi-flask',
    filterDescription: 'description for Investigation Type Name',
    tooltipDescription: 'Investigation Type Name tooltip description',
    showInFilters: true
  },
  'admes.remarks': {
    displayName: 'Remarks',
    flattenedDisplayName: 'ADME Remarks',
    displayGroupName: 'ADME',
    type: 'text',
    djangoLookupField: 'adme__remarks__text_field',
    qualifiers: ['contains', 'is', 'is None'],
    icon: 'mdi-book-outline',
    filterDescription: 'description for ADME remarks',
    tooltipDescription: 'ADME remarks tooltip description',
    showInFilters: true
  },
  'admes.testMaterial': {
    displayName: 'Test Material',
    flattenedDisplayName: 'ADME Test Material',
    displayGroupName: 'ADME',
    type: 'text',
    djangoLookupField: 'adme__test_material',
    apiEndpoint: 'novel-food-values-list/',
    djangoApp: 'studies',
    djangoModel: 'ADME',
    djangoField: 'test_material',
    qualifiers: ['is', 'is None'],
    icon: 'mdi-book-outline',
    filterDescription: 'description for ADME Test Material',
    tooltipDescription: 'ADME Test Material tooltip description',
    showInFilters: true
  },

  // genotox

  'genotoxes.testType': {
    displayName: 'Test Type',
    flattenedDisplayName: 'Genotox Test Type',
    displayGroupName: 'Genotox',
    type: 'text',
    djangoLookupField: 'genotox__test_type__tax_node',
    apiEndpoint: 'novel-food-values-list/',
    djangoApp: 'taxonomies',
    djangoModel: 'TaxonomyNode',
    djangoField: 'short_name',
    djangoLimitchoicesApp: 'studies',
    djangoLimitchoicesModel: 'Genotox',
    djangoLimitchoicesField: 'test_type',
    qualifiers: ['is', 'is None'],
    icon: 'mdi-dna',
    filterDescription: 'description for Test Type',
    tooltipDescription: 'Test Type tooltip description',
    showInFilters: true
  },
  'genotoxes.guideline': {
    displayName: 'Guideline',
    flattenedDisplayName: 'Genotox Guideline',
    displayGroupName: 'Genotox',
    type: 'text',
    djangoLookupField: 'genotox__guideline__tax_node',
    apiEndpoint: 'novel-food-values-list/',
    djangoApp: 'taxonomies',
    djangoModel: 'TaxonomyNode',
    djangoField: 'short_name',
    djangoLimitchoicesApp: 'studies',
    djangoLimitchoicesModel: 'Genotox',
    djangoLimitchoicesField: 'guideline',
    qualifiers: ['is', 'is None'],
    icon: 'mdi-book-open-outline',
    filterDescription: 'description for Guideline',
    tooltipDescription: 'Guideline tooltip description',
    showInFilters: true
  },
  'genotoxes.guidelineQualifier': {
    displayName: 'Guideline Qualifier',
    flattenedDisplayName: 'Genotox Guideline Qualifier',
    displayGroupName: 'Genotox',
    type: 'text',
    djangoLookupField: 'genotox__guideline_qualifier__title',
    apiEndpoint: 'novel-food-values-list/',
    djangoApp: 'taxonomies',
    djangoModel: 'GuidelineQualifier',
    djangoField: 'title',
    qualifiers: ['is', 'is None'],
    icon: 'mdi-book-open-outline',
    filterDescription: 'description for Guideline Qualifier',
    tooltipDescription: 'Guideline Qualifier tooltip description',
    showInFilters: true
  },
  'genotoxes.studySource': {
    displayName: 'Study Source',
    flattenedDisplayName: 'Genotox Study Source',
    displayGroupName: 'Genotox',
    type: 'text',
    djangoLookupField: 'genotox__study_source__title',
    apiEndpoint: 'novel-food-values-list/',
    djangoApp: 'studies',
    djangoModel: 'StudySource',
    djangoField: 'title',
    qualifiers: ['is', 'is None'],
    icon: 'mdi-book-outline',
    filterDescription: 'description for Study Source',
    tooltipDescription: 'Study Source tooltip description',
    showInFilters: true
  },
  'genotoxes.outcome': {
    displayName: 'Outcome',
    flattenedDisplayName: 'Genotox Outcome',
    displayGroupName: 'Genotox',
    type: 'text',
    djangoLookupField: 'genotox__outcome__tax_node',
    apiEndpoint: 'novel-food-values-list/',
    djangoApp: 'taxonomies',
    djangoModel: 'TaxonomyNode',
    djangoField: 'short_name',
    djangoLimitchoicesApp: 'studies',
    djangoLimitchoicesModel: 'Genotox',
    djangoLimitchoicesField: 'outcome',
    qualifiers: ['is', 'is None'],
    icon: 'mdi-check-circle-outline',
    filterDescription: 'description for Genotox Outcome',
    tooltipDescription: 'Genotox Outcome tooltip description',
    showInFilters: true
  },
  'genotoxes.remarks': {
    displayName: 'Remarks',
    flattenedDisplayName: 'Genotox Remarks',
    displayGroupName: 'Genotox',
    type: 'text',
    djangoLookupField: 'genotox__remarks__text_field',
    qualifiers: ['contains', 'is', 'is None'],
    icon: 'mdi-book-outline',
    filterDescription: 'description for Genotox remarks',
    tooltipDescription: 'Genotox remarks tooltip description',
    showInFilters: true
  },
  'genotoxes.testMaterial': {
    displayName: 'Test Material',
    flattenedDisplayName: 'Genotox Test Material',
    displayGroupName: 'Genotox',
    type: 'text',
    djangoLookupField: 'genotox__test_material',
    apiEndpoint: 'novel-food-values-list/',
    djangoApp: 'studies',
    djangoModel: 'Genotox',
    djangoField: 'test_material',
    qualifiers: ['is', 'is None'],
    icon: 'mdi-book-outline',
    filterDescription: 'description for Genotox Test Material',
    tooltipDescription: 'Genotox Test Material tooltip description',
    showInFilters: true
  },

  // endpoint studies

  'endpointstudies.testType': {
    displayName: 'Test Type',
    flattenedDisplayName: 'Endpoint Study Test Type',
    displayGroupName: 'Endpoint Study',
    type: 'text',
    djangoLookupField: 'endpointstudy__test_type__tax_node',
    apiEndpoint: 'novel-food-values-list/',
    djangoApp: 'taxonomies',
    djangoModel: 'TaxonomyNode',
    djangoField: 'short_name',
    djangoLimitchoicesApp: 'studies',
    djangoLimitchoicesModel: 'Endpointstudy',
    djangoLimitchoicesField: 'test_type',
    qualifiers: ['is', 'is None'],
    icon: 'mdi-flask-outline',
    filterDescription: 'description for Test Type',
    tooltipDescription: 'Test Type tooltip description',
    showInFilters: true
  },
  'endpointstudies.guidelineQualifier': {
    displayName: 'Guideline Qualifier',
    flattenedDisplayName: 'Endpoint Study Guideline Qualifier',
    displayGroupName: 'Endpoint Study',
    type: 'text',
    djangoLookupField: 'endpointstudy__guideline_qualifier__title',
    apiEndpoint: 'novel-food-values-list/',
    djangoApp: 'taxonomies',
    djangoModel: 'GuidelineQualifier',
    djangoField: 'title',
    qualifiers: ['is', 'is None'],
    icon: 'mdi-book-open-outline',
    filterDescription: 'description for Guideline Qualifier',
    tooltipDescription: 'Guideline Qualifier tooltip description',
    showInFilters: true
  },
  'endpointstudies.guideline': {
    displayName: 'Guideline',
    flattenedDisplayName: 'Endpoint Study Guideline',
    displayGroupName: 'Endpoint Study',
    type: 'text',
    djangoLookupField: 'endpointstudy__guideline__tax_node',
    apiEndpoint: 'novel-food-values-list/',
    djangoApp: 'taxonomies',
    djangoModel: 'TaxonomyNode',
    djangoField: 'short_name',
    djangoLimitchoicesApp: 'studies',
    djangoLimitchoicesModel: 'Endpointstudy',
    djangoLimitchoicesField: 'guideline',
    qualifiers: ['is', 'is None'],
    icon: 'mdi-book-open-outline',
    filterDescription: 'description for Guideline',
    tooltipDescription: 'Guideline tooltip description',
    showInFilters: true
  },
  'endpointstudies.species': {
    displayName: 'Species',
    flattenedDisplayName: 'Endpoint Study Species',
    displayGroupName: 'Endpoint Study',
    type: 'text',
    djangoLookupField: 'endpointstudy__species__tax_node',
    apiEndpoint: 'novel-food-values-list/',
    djangoApp: 'taxonomies',
    djangoModel: 'TaxonomyNode',
    djangoField: 'short_name',
    djangoLimitchoicesApp: 'studies',
    djangoLimitchoicesModel: 'Endpointstudy',
    djangoLimitchoicesField: 'species',
    qualifiers: ['is', 'is None'],
    icon: 'mdi-paw',
    filterDescription: 'description for Species',
    tooltipDescription: 'Species tooltip description',
    showInFilters: true
  },
  'endpointstudies.sex': {
    displayName: 'Sex',
    flattenedDisplayName: 'Endpoint Study Sex',
    displayGroupName: 'Endpoint Study',
    type: 'text',
    djangoLookupField: 'endpointstudy__sex__tax_node',
    apiEndpoint: 'novel-food-values-list/',
    djangoApp: 'taxonomies',
    djangoModel: 'TaxonomyNode',
    djangoField: 'short_name',
    djangoLimitchoicesApp: 'studies',
    djangoLimitchoicesModel: 'Endpointstudy',
    djangoLimitchoicesField: 'sex',
    qualifiers: ['is', 'is None'],
    icon: 'mdi-gender-male-female',
    filterDescription: 'description for Sex',
    tooltipDescription: 'Sex tooltip description',
    showInFilters: true
  },
  'endpointstudies.studyDuration': {
    displayName: 'Study Duration',
    flattenedDisplayName: 'Endpoint Study Duration',
    displayGroupName: 'Endpoint Study',
    type: 'text',
    djangoLookupField: 'endpointstudy__study_duration',
    qualifiers: ['is', 'is greater than', 'is less than', 'is None'],
    icon: 'mdi-clock-outline',
    filterDescription: 'description for Study Duration',
    tooltipDescription: 'Study Duration tooltip description',
    showInFilters: true
  },
  'endpointstudies.durationUnit': {
    displayName: 'Study Duration Unit',
    flattenedDisplayName: 'Endpoint Study Duration Unit',
    displayGroupName: 'Endpoint Study',
    type: 'text',
    djangoLookupField: 'endpointstudy__duration_unit__tax_node',
    apiEndpoint: 'novel-food-values-list/',
    djangoApp: 'taxonomies',
    djangoModel: 'TaxonomyNode',
    djangoField: 'short_name',
    djangoLimitchoicesApp: 'studies',
    djangoLimitchoicesModel: 'Endpointstudy',
    djangoLimitchoicesField: 'duration_unit',
    qualifiers: ['is', 'is None'],
    icon: 'mdi-clock-outline',
    filterDescription: 'description for Study Duration Unit',
    tooltipDescription: 'Study Duration Unit tooltip description',
    showInFilters: true
  },
  'endpointstudies.studySource': {
    displayName: 'Study Source',
    flattenedDisplayName: 'Endpoint Study Source',
    displayGroupName: 'Endpoint Study',
    type: 'text',
    djangoLookupField: 'endpointstudy__study_source__title',
    apiEndpoint: 'novel-food-values-list/',
    djangoApp: 'studies',
    djangoModel: 'StudySource',
    djangoField: 'title',
    qualifiers: ['is', 'is None'],
    icon: 'mdi-book-outline',
    filterDescription: 'description for Study Source',
    tooltipDescription: 'Study Source tooltip description',
    showInFilters: true
  },
  'endpointstudies.remarks': {
    displayName: 'Remarks',
    flattenedDisplayName: 'Endpoint Study Remarks',
    displayGroupName: 'Endpoint Study',
    type: 'text',
    djangoLookupField: 'endpointstudy__remarks__text_field',
    qualifiers: ['contains', 'is', 'is None'],
    icon: 'mdi-book-outline',
    filterDescription: 'description for Endpoint Study Remarks',
    tooltipDescription: 'Endpoint Study Remarks tooltip description',
    showInFilters: true
  },
  'endpointstudies.testMaterial': {
    displayName: 'Test Material',
    flattenedDisplayName: 'Endpoint Study Test Material',
    displayGroupName: 'Endpoint Study',
    type: 'text',
    djangoLookupField: 'endpointstudy__test_material',
    apiEndpoint: 'novel-food-values-list/',
    djangoApp: 'studies',
    djangoModel: 'Endpointstudy',
    djangoField: 'test_material',
    qualifiers: ['is', 'is None'],
    icon: 'mdi-book-outline',
    filterDescription: 'description for Endpoint Study Test Material',
    tooltipDescription: 'Endpoint Study Test Material tooltip description',
    showInFilters: true
  },

  // endpoint

  'endpointstudies.endpoints.referencePoint': {
    displayName: 'Reference Point',
    flattenedDisplayName: 'Endpoint Reference Point',
    displayGroupName: 'Endpoint',
    type: 'text',
    djangoLookupField: 'endpointstudy__endpoints__reference_point__tax_node',
    apiEndpoint: 'novel-food-values-list/',
    djangoApp: 'taxonomies',
    djangoModel: 'TaxonomyNode',
    djangoField: 'short_name',
    djangoLimitchoicesApp: 'studies',
    djangoLimitchoicesModel: 'Endpoint',
    djangoLimitchoicesField: 'reference_point',
    qualifiers: ['is', 'is None'],
    icon: 'mdi-target',
    filterDescription: 'description for Reference Point',
    tooltipDescription: 'Reference Point tooltip description',
    showInFilters: true
  },
  'endpointstudies.endpoints.qualifier': {
    displayName: 'Qualifier',
    flattenedDisplayName: 'Endpoint Qualifier',
    displayGroupName: 'Endpoint',
    type: 'text',
    djangoLookupField: 'endpointstudy__endpoints__qualifier__tax_node',
    apiEndpoint: 'novel-food-values-list/',
    djangoApp: 'taxonomies',
    djangoModel: 'TaxonomyNode',
    djangoField: 'short_name',
    djangoLimitchoicesApp: 'studies',
    djangoLimitchoicesModel: 'Endpoint',
    djangoLimitchoicesField: 'qualifier',
    qualifiers: ['is', 'is None'],
    icon: 'mdi-scale',
    filterDescription: 'description for Qualifier',
    tooltipDescription: 'Qualifier tooltip description',
    showInFilters: true
  },
  'endpointstudies.endpoints.subpopulation': {
    displayName: 'Subpopulation',
    flattenedDisplayName: 'Endpoint Subpopulation',
    displayGroupName: 'Endpoint',
    type: 'text',
    djangoLookupField: 'endpointstudy__endpoints__subpopulation__tax_node',
    apiEndpoint: 'novel-food-values-list/',
    djangoApp: 'taxonomies',
    djangoModel: 'TaxonomyNode',
    djangoField: 'short_name',
    djangoLimitchoicesApp: 'studies',
    djangoLimitchoicesModel: 'Endpoint',
    djangoLimitchoicesField: 'subpopulation',
    qualifiers: ['is', 'is None'],
    icon: 'mdi-account-group',
    filterDescription: 'description for Subpopulation',
    tooltipDescription: 'Subpopulation tooltip description',
    showInFilters: true
  },
  'endpointstudies.endpoints.lovalue': {
    displayName: 'Value',
    flattenedDisplayName: 'Endpoint Value',
    displayGroupName: 'Endpoint',
    type: 'number',
    djangoLookupField: 'endpointstudy__endpoints__lovalue',
    qualifiers: ['is', 'is greater than', 'is less than', 'is None'],
    icon: 'mdi-arrow-down',
    filterDescription: 'description for Value',
    tooltipDescription: 'Value tooltip description',
    showInFilters: true
  },
  'endpointstudies.endpoints.unit': {
    displayName: 'Unit',
    flattenedDisplayName: 'Endpoint Unit',
    displayGroupName: 'Endpoint',
    type: 'text',
    djangoLookupField: 'endpointstudy__endpoints__unit__tax_node',
    apiEndpoint: 'novel-food-values-list/',
    djangoApp: 'taxonomies',
    djangoModel: 'TaxonomyNode',
    djangoField: 'short_name',
    djangoLimitchoicesApp: 'studies',
    djangoLimitchoicesModel: 'Endpoint',
    djangoLimitchoicesField: 'unit',
    qualifiers: ['is', 'is None'],
    icon: 'mdi-scale',
    filterDescription: 'description for Endpoint Unit',
    tooltipDescription: 'Endpoint Unit tooltip description',
    showInFilters: true
  },

  // Final Outcome

  'endpointstudies.endpoints.finalOutcomes.outcome': {
    displayName: 'Outcome',
    flattenedDisplayName: 'Final Outcome Outcome',
    displayGroupName: 'Final Outcome',
    type: 'text',
    djangoLookupField: 'endpointstudy__endpoints__finaloutcome__outcome__tax_node',
    apiEndpoint: 'novel-food-values-list/',
    djangoApp: 'taxonomies',
    djangoModel: 'TaxonomyNode',
    djangoField: 'short_name',
    djangoLimitchoicesApp: 'studies',
    djangoLimitchoicesModel: 'FinalOutcome',
    djangoLimitchoicesField: 'outcome',
    qualifiers: ['is', 'is None'],
    icon: 'mdi-check-circle-outline',
    filterDescription: 'description for Final Outcome Outcome',
    tooltipDescription: 'Final Outcome Outcome tooltip description',
    showInFilters: true
  },
  'endpointstudies.endpoints.finalOutcomes.qualifier': {
    displayName: 'Qualifier',
    flattenedDisplayName: 'Final Outcome Qualifier',
    displayGroupName: 'Final Outcome',
    type: 'text',
    djangoLookupField: 'endpointstudy__endpoints__finaloutcome__qualifier__tax_node',
    apiEndpoint: 'novel-food-values-list/',
    djangoApp: 'taxonomies',
    djangoModel: 'TaxonomyNode',
    djangoField: 'short_name',
    djangoLimitchoicesApp: 'studies',
    djangoLimitchoicesModel: 'FinalOutcome',
    djangoLimitchoicesField: 'qualifier',
    qualifiers: ['is', 'is None'],
    icon: 'mdi-scale',
    filterDescription: 'description for Qualifier',
    tooltipDescription: 'Qualifier tooltip description',
    showInFilters: true
  },
  'endpointstudies.endpoints.finalOutcomes.value': {
    displayName: 'Value',
    flattenedDisplayName: 'Final Outcome Value',
    djangoLookupField: 'endpointstudy__endpoints__finaloutcome__value',
    displayGroupName: 'Final Outcome',
    type: 'number',
    qualifiers: ['is', 'is greater than', 'is less than', 'is None'],
    icon: 'mdi-numeric',
    filterDescription: 'description for Value',
    tooltipDescription: 'Value tooltip description',
    showInFilters: true
  },

  'endpointstudies.endpoints.finalOutcomes.unit': {
    displayName: 'Unit',
    flattenedDisplayName: 'Final Outcome Unit',
    displayGroupName: 'Final Outcome',
    type: 'text',
    djangoLookupField: 'endpointstudy__endpoints__finaloutcome__unit__tax_node',
    apiEndpoint: 'novel-food-values-list/',
    djangoApp: 'taxonomies',
    djangoModel: 'TaxonomyNode',
    djangoField: 'short_name',
    djangoLimitchoicesApp: 'studies',
    djangoLimitchoicesModel: 'FinalOutcome',
    djangoLimitchoicesField: 'unit',
    qualifiers: ['is', 'is None'],
    icon: 'mdi-scale',
    filterDescription: 'description for Final Outcome Unit',
    tooltipDescription: 'Final Outcome Unit tooltip description',
    showInFilters: true
  },

  'endpointstudies.endpoints.finalOutcomes.uncertaintyFactor': {
    displayName: 'Uncertainty Factor',
    flattenedDisplayName: 'Final Outcome Uncertainty Factor',
    displayGroupName: 'Final Outcome',
    type: 'text',
    djangoLookupField: 'endpointstudy__endpoints__finaloutcome__uncertainty_factor',
    qualifiers: ['is', 'is greater than', 'is less than', 'is None'],
    icon: 'mdi-scale',
    filterDescription: 'description for Final Outcome Uncertainty Factor',
    tooltipDescription: 'Final Outcome Uncertainty Factor tooltip description',
    showInFilters: true
  },
  'endpointstudies.endpoints.finalOutcomes.remarks': {
    displayName: 'Remarks',
    flattenedDisplayName: 'Final Outcome Remarks',
    displayGroupName: 'Final Outcome',
    type: 'text',
    djangoLookupField: 'endpointstudy__endpoints__finaloutcome__remarks__text_field',
    qualifiers: ['contains', 'is', 'is None'],
    icon: 'mdi-scale',
    filterDescription: 'description for Final Outcome Remarks',
    tooltipDescription: 'Final Outcome Remarks tooltip description',
    showInFilters: true
  },

  'endpointstudies.endpoints.finalOutcomes.populations.subgroup': {
    displayName: 'Subgroup',
    flattenedDisplayName: 'Final Outcome Population Subgroup',
    displayGroupName: 'Population',
    type: 'text',
    djangoLookupField:
      'endpointstudy__endpoints__finaloutcome__populations__population__subgroup__title',
    apiEndpoint: 'novel-food-values-list/',
    djangoApp: 'taxonomies',
    djangoModel: 'Subgroup',
    djangoField: 'title',
    qualifiers: ['is', 'is None'],
    icon: 'mdi-account-multiple-outline',
    filterDescription: 'description for Subgroup',
    tooltipDescription: 'Subgroup tooltip description',
    showInFilters: true
  },
  'endpointstudies.endpoints.finalOutcomes.populations.qualifier': {
    displayName: 'Qualifier',
    flattenedDisplayName: 'Final Outcome Population Qualifier',
    displayGroupName: 'Population',
    type: 'text',
    djangoLookupField:
      'endpointstudy__endpoints__finaloutcome__populations__population__qualifier__tax_node',
    apiEndpoint: 'novel-food-values-list/',
    djangoApp: 'taxonomies',
    djangoModel: 'TaxonomyNode',
    djangoField: 'short_name',
    djangoLimitchoicesApp: 'taxonomies',
    djangoLimitchoicesModel: 'Population',
    djangoLimitchoicesField: 'qualifier',
    qualifiers: ['is', 'is None'],
    icon: 'mdi-scale',
    filterDescription: 'description for Qualifier',
    tooltipDescription: 'Qualifier tooltip description',
    showInFilters: true
  },
  'endpointstudies.endpoints.finalOutcomes.populations.value': {
    displayName: 'Value',
    flattenedDisplayName: 'Final Outcome Population Value',
    displayGroupName: 'Population',
    type: 'number',
    djangoLookupField: 'endpointstudy__endpoints__finaloutcome__populations__population__value',
    qualifiers: ['is', 'is greater than', 'is less than', 'is None'],
    icon: 'mdi-numeric',
    filterDescription: 'description for Value',
    tooltipDescription: 'Value tooltip description',
    showInFilters: true
  },
  'endpointstudies.endpoints.finalOutcomes.populations.upperRangeValue': {
    displayName: 'Upper Range Value',
    flattenedDisplayName: 'Final Outcome Population Upper Range Value',
    displayGroupName: 'Population',
    type: 'number',
    djangoLookupField:
      'endpointstudy__endpoints__finaloutcome__populations__population__upper_range_value',
    qualifiers: ['is', 'is greater than', 'is less than', 'is None'],
    icon: 'mdi-numeric',
    filterDescription: 'description for Upper Range Value',
    tooltipDescription: 'Upper Range Value tooltip description',
    showInFilters: true
  },
  'endpointstudies.endpoints.finalOutcomes.populations.unit': {
    displayName: 'Unit',
    flattenedDisplayName: 'Final Outcome Population Unit',
    displayGroupName: 'Population',
    type: 'text',
    djangoLookupField:
      'endpointstudy__endpoints__finaloutcome__populations__population__unit__tax_node',
    apiEndpoint: 'novel-food-values-list/',
    djangoApp: 'taxonomies',
    djangoModel: 'TaxonomyNode',
    djangoField: 'short_name',
    djangoLimitchoicesApp: 'taxonomies',
    djangoLimitchoicesModel: 'Population',
    djangoLimitchoicesField: 'unit',
    qualifiers: ['is', 'is None'],
    icon: 'mdi-scale',
    filterDescription: 'description for Unit',
    tooltipDescription: 'Unit tooltip description',
    showInFilters: true
  },

  // Novel Food Variant

  'novelFoodVariants.foodForm': {
    displayName: 'Food Form',
    flattenedDisplayName: 'Novel Food Variant Food Form',
    displayGroupName: 'Novel Food Variant',
    type: 'text',
    djangoLookupField: 'novelfoodvariant__food_form__title',
    apiEndpoint: 'novel-food-values-list/',
    djangoApp: 'composition',
    djangoModel: 'FoodForm',
    djangoField: 'title',
    qualifiers: ['is', 'is None'],
    icon: 'mdi-rice',
    filterDescription: 'description for Novel Food Variant Food Form',
    tooltipDescription: 'Novel Food Variant Food Form tooltip description',
    showInFilters: true
  },
  'novelFoodVariants.riskAssessRedFlags.title': {
    displayName: 'Title',
    flattenedDisplayName: 'Risk Assessment Red Flag',
    displayGroupName: 'Novel Food Variant',
    type: 'text',
    djangoLookupField: 'novelfoodvariant__risk_assess_red_flags__risk_assess_red_flag__title',
    apiEndpoint: 'novel-food-values-list/',
    djangoApp: 'composition',
    djangoModel: 'RiskAssessRedFlag',
    djangoField: 'title',
    qualifiers: ['is', 'is None'],
    icon: 'mdi-rice',
    filterDescription: 'description for Risk Assessment Red Flags',
    tooltipDescription: 'Risk Assessment Red Flags tooltip description',
    showInFilters: true
  },
  'novelFoodVariants.productionProcesses.process': {
    displayName: 'Production Process',
    flattenedDisplayName: 'Production Process',
    displayGroupName: 'Novel Food Variant',
    type: 'text',
    djangoLookupField: 'novelfoodvariant__productions__process__tax_node',
    apiEndpoint: 'novel-food-values-list/',
    djangoApp: 'taxonomies',
    djangoModel: 'TaxonomyNode',
    djangoField: 'short_name',
    djangoLimitchoicesApp: 'composition',
    djangoLimitchoicesModel: 'ProductionNovelFoodVariant',
    djangoLimitchoicesField: 'process',
    qualifiers: ['is', 'is None'],
    icon: 'mdi-rice',
    filterDescription: 'description for Production Process',
    tooltipDescription: 'Production Process tooltip description',
    showInFilters: true
  },
  'novelFoodVariants.proposedUses.useType': {
    displayName: 'Use Type',
    flattenedDisplayName: 'Proposed Use Type',
    displayGroupName: 'Novel Food Variant',
    type: 'text',
    djangoLookupField: 'novelfoodvariant__proposed_uses__use_type',
    apiEndpoint: 'novel-food-values-list/',
    djangoApp: 'composition',
    djangoModel: 'ProposedUse',
    djangoField: 'use_type',
    qualifiers: ['is', 'is None'],
    icon: 'mdi-rice',
    filterDescription: 'description for Proposed Use Type',
    tooltipDescription: 'Proposed Use Type tooltip description',
    showInFilters: true
  },
  'novelFoodVariants.proposedUses.remarks': {
    displayName: 'Remarks',
    flattenedDisplayName: 'Proposed Use Remarks',
    displayGroupName: 'Novel Food Variant',
    type: 'text',
    djangoLookupField: 'novelfoodvariant__proposed_uses__remarks__text_field',
    qualifiers: ['contains', 'is', 'is None'],
    icon: 'mdi-rice',
    filterDescription: 'description for Proposed Use Remarks',
    tooltipDescription: 'Proposed Use Remarks tooltip description',
    showInFilters: true
  },
  'novelFoodVariants.proposedUses.population.subgroup': {
    displayName: 'Subgroup',
    flattenedDisplayName: 'Proposed Use Population Subgroup',
    displayGroupName: 'Population',
    type: 'text',
    djangoLookupField: 'novelfoodvariant__proposed_uses__population__subgroup__title',
    apiEndpoint: 'novel-food-values-list/',
    djangoApp: 'taxonomies',
    djangoModel: 'Subgroup',
    djangoField: 'title',
    qualifiers: ['is', 'is None'],
    icon: 'mdi-account-multiple-outline',
    filterDescription: 'description for Subgroup',
    tooltipDescription: 'Subgroup tooltip description',
    showInFilters: true
  },
  'novelFoodVariants.proposedUses.population.qualifier': {
    displayName: 'Qualifier',
    flattenedDisplayName: 'Proposed Use Population Qualifier',
    displayGroupName: 'Population',
    type: 'text',
    djangoLookupField: 'novelfoodvariant__proposed_uses__population__qualifier__tax_node',
    apiEndpoint: 'novel-food-values-list/',
    djangoApp: 'taxonomies',
    djangoModel: 'TaxonomyNode',
    djangoField: 'short_name',
    djangoLimitchoicesApp: 'taxonomies',
    djangoLimitchoicesModel: 'Population',
    djangoLimitchoicesField: 'qualifier',
    qualifiers: ['is', 'is None'],
    icon: 'mdi-scale',
    filterDescription: 'description for Qualifier',
    tooltipDescription: 'Qualifier tooltip description',
    showInFilters: true
  },
  'novelFoodVariants.proposedUses.population.value': {
    displayName: 'Value',
    flattenedDisplayName: 'Proposed Use Population Value',
    displayGroupName: 'Population',
    type: 'number',
    djangoLookupField: 'novelfoodvariant__proposed_uses__population__value',
    qualifiers: ['is', 'is greater than', 'is less than', 'is None'],
    icon: 'mdi-numeric',
    filterDescription: 'description for Value',
    tooltipDescription: 'Value tooltip description',
    showInFilters: true
  },
  'novelFoodVariants.proposedUses.population.upperRangeValue': {
    displayName: 'Upper Range Value',
    flattenedDisplayName: 'Proposed Use Population Upper Range Value',
    displayGroupName: 'Population',
    type: 'number',
    djangoLookupField: 'novelfoodvariant__proposed_uses__population__upper_range_value',
    qualifiers: ['is', 'is greater than', 'is less than', 'is None'],
    icon: 'mdi-numeric',
    filterDescription: 'description for Upper Range Value',
    tooltipDescription: 'Upper Range Value tooltip description',
    showInFilters: true
  },
  'novelFoodVariants.proposedUses.population.unit': {
    displayName: 'Unit',
    flattenedDisplayName: 'Proposed Use Population Unit',
    displayGroupName: 'Population',
    type: 'text',
    djangoLookupField: 'novelfoodvariant__proposed_uses__population__unit__tax_node',
    apiEndpoint: 'novel-food-values-list/',
    djangoApp: 'taxonomies',
    djangoModel: 'TaxonomyNode',
    djangoField: 'short_name',
    djangoLimitchoicesApp: 'taxonomies',
    djangoLimitchoicesModel: 'Population',
    djangoLimitchoicesField: 'unit',
    qualifiers: ['is', 'is None'],
    icon: 'mdi-scale',
    filterDescription: 'description for Unit',
    tooltipDescription: 'Unit tooltip description',
    showInFilters: true
  },


  'novelFoodVariants.compositions.value': {
    displayName: 'Value',
    flattenedDisplayName: 'Composition Value',
    displayGroupName: 'Novel Food Variant',
    type: 'text',
    djangoLookupField: 'novelfoodvariant__compositions__value',
    qualifiers: ['is', 'is greater than', 'is less than', 'is None'],
    icon: 'mdi-scale',
    filterDescription: 'description for Composition Value',
    tooltipDescription: 'Composition Value tooltip description',
    showInFilters: true
  },
  'novelFoodVariants.compositions.upperRangeValue': {
    displayName: 'Upper Range Value',
    flattenedDisplayName: 'Composition Upper Range Value',
    displayGroupName: 'Novel Food Variant',
    type: 'text',
    djangoLookupField: 'novelfoodvariant__compositions__upper_range_value',
    qualifiers: ['is', 'is greater than', 'is less than', 'is None'],
    icon: 'mdi-scale',
    filterDescription: 'description for Composition Upper Range Value',
    tooltipDescription: 'Composition Upper Range Value tooltip description',
    showInFilters: true
  },
  'novelFoodVariants.compositions.unit': {
    displayName: 'Unit',
    flattenedDisplayName: 'Composition Unit',
    displayGroupName: 'Novel Food Variant',
    type: 'text',
    djangoLookupField: 'novelfoodvariant__compositions__unit__tax_node',
    apiEndpoint: 'novel-food-values-list/',
    djangoApp: 'taxonomies',
    djangoModel: 'TaxonomyNode',
    djangoField: 'short_name',
    djangoLimitchoicesApp: 'composition',
    djangoLimitchoicesModel: 'Composition',
    djangoLimitchoicesField: 'unit',
    qualifiers: ['is', 'is None'],
    icon: 'mdi-scale',
    filterDescription: 'description for Composition Unit',
    tooltipDescription: 'Composition Unit tooltip description',
    showInFilters: true
  },
  'novelFoodVariants.compositions.qualifier': {
    displayName: 'Qualifier',
    flattenedDisplayName: 'Composition Qualifier',
    displayGroupName: 'Novel Food Variant',
    type: 'text',
    djangoLookupField: 'novelfoodvariant__compositions__qualifier__tax_node',
    apiEndpoint: 'novel-food-values-list/',
    djangoApp: 'taxonomies',
    djangoModel: 'TaxonomyNode',
    djangoField: 'short_name',
    djangoLimitchoicesApp: 'composition',
    djangoLimitchoicesModel: 'Composition',
    djangoLimitchoicesField: 'qualifier',
    qualifiers: ['is', 'is None'],
    icon: 'mdi-scale',
    filterDescription: 'description for Composition Qualifier',
    tooltipDescription: 'Composition Qualifier tooltip description',
    showInFilters: true
  },
  'novelFoodVariants.compositions.type': {
    displayName: 'Type',
    flattenedDisplayName: 'Composition Type',
    displayGroupName: 'Novel Food Variant',
    type: 'text',
    djangoLookupField: 'novelfoodvariant__compositions__type',
    apiEndpoint: 'novel-food-values-list/',
    djangoApp: 'composition',
    djangoModel: 'Composition',
    djangoField: 'type',
    qualifiers: ['is', 'is None'],
    icon: 'mdi-scale',
    filterDescription: 'description for Composition Type',
    tooltipDescription: 'Composition Type tooltip description',
    showInFilters: true
  },
  'novelFoodVariants.compositions.footnote': {
    displayName: 'Footnote',
    flattenedDisplayName: 'Composition Footnote',
    displayGroupName: 'Novel Food Variant',
    type: 'text',
    djangoLookupField: 'novelfoodvariant__compositions__footnote__text_field',
    apiEndpoint: 'novel-food-values-list/',
    djangoApp: 'composition',
    djangoModel: 'Composition',
    djangoField: 'footnote',
    qualifiers: ['contains', 'is', 'is None'],
    icon: 'mdi-scale',
    filterDescription: 'description for Composition Footnote',
    tooltipDescription: 'Composition Footnote tooltip description',
    showInFilters: true
  },
  'novelFoodVariants.compositions.parameterTitle': {
    displayName: 'Title',
    flattenedDisplayName: 'Parameter Title',
    displayGroupName: 'Novel Food Variant',
    type: 'text',
    djangoLookupField: 'novelfoodvariant__compositions__parameter__title',
    apiEndpoint: 'novel-food-values-list/',
    djangoApp: 'composition',
    djangoModel: 'Parameter',
    djangoField: 'title',
    qualifiers: ['is', 'is None'],
    icon: 'mdi-scale',
    filterDescription: 'description for Parameter Title',
    tooltipDescription: 'Parameter Title tooltip description',
    showInFilters: true
  },
  'novelFoodVariants.compositions.parameterTypeTitle': {
    displayName: 'Type',
    flattenedDisplayName: 'Parameter Type',
    displayGroupName: 'Novel Food Variant',
    type: 'text',
    djangoLookupField: 'novelfoodvariant__compositions__parameter__type__title',
    apiEndpoint: 'novel-food-values-list/',
    djangoApp: 'composition',
    djangoModel: 'ParameterType',
    djangoField: 'title',
    qualifiers: ['is', 'is None'],
    icon: 'mdi-scale',
    filterDescription: 'description for Parameter Type',
    tooltipDescription: 'Parameter Type tooltip description',
    showInFilters: true
  },
  'novelFoodVariants.compositions.parameterVocabId': {
    displayName: 'Vocab ID',
    flattenedDisplayName: 'Parameter Vocabulary ID',
    displayGroupName: 'Novel Food Variant',
    type: 'text',
    djangoLookupField: 'novelfoodvariant__compositions__parameter__vocab_id__tax_node',
    apiEndpoint: 'novel-food-values-list/',
    djangoApp: 'taxonomies',
    djangoModel: 'TaxonomyNode',
    djangoField: 'short_name',
    djangoLimitchoicesApp: 'composition',
    djangoLimitchoicesModel: 'Parameter',
    djangoLimitchoicesField: 'vocab_id',
    qualifiers: ['is', 'is None'],
    icon: 'mdi-scale',
    filterDescription: 'description for Parameter Vocabulary ID',
    tooltipDescription: 'Parameter Vocabulary ID tooltip description',
    showInFilters: true
  },

  // links do django admin
  djangoAdminOpinion: {
    displayName: 'Opinion Admin',
    flattenedDisplayName: 'Opinion Admin',
    icon: 'mdi-account-cowboy-hat',
    filterDescription: 'will provide a link to django admin',
    tooltipDescription: 'will provide a link to django admin',
    showInFilters: false
  },
  djangoAdminNovelFood: {
    displayName: 'Novel Food Admin',
    flattenedDisplayName: 'Novel Food Admin',
    icon: 'mdi-account-cowboy-hat',
    filterDescription: 'will provide a link to django admin',
    tooltipDescription: 'will provide a link to django admin',
    showInFilters: false
  },
  'admes.djangoAdminAdme': {
    displayName: 'ADME Admin',
    flattenedDisplayName: 'ADME Admin',
    icon: 'mdi-account-cowboy-hat',
    filterDescription: 'will provide a link to django admin',
    tooltipDescription: 'will provide a link to django admin',
    showInFilters: false
  },
  'genotoxes.djangoAdminGenotox': {
    displayName: 'Genotox Admin',
    flattenedDisplayName: 'Genotox Admin',
    icon: 'mdi-account-cowboy-hat',
    filterDescription: 'will provide a link to django admin',
    tooltipDescription: 'Opinion tooltip description',
    showInFilters: false
  },
  'endpointstudies.djangoAdminEndpointstudy': {
    displayName: 'Endpoint Study Admin',
    flattenedDisplayName: 'Endpoint Study Admin',
    icon: 'mdi-account-cowboy-hat',
    filterDescription: 'will provide a link to django admin',
    tooltipDescription: 'will provide a link to django admin',
    showInFilters: false
  },
  'endpointstudies.endpoints.finalOutcomes.djangoAdminFinalOutcome': {
    displayName: 'Final Outcome Admin',
    flattenedDisplayName: 'Final Outcome Admin',
    icon: 'mdi-account-cowboy-hat',
    filterDescription: 'will provide a link to django admin',
    tooltipDescription: 'will provide a link to django admin',
    showInFilters: false
  },
  'novelFoodVariants.djangoAdminNovelFoodVariant': {
    displayName: 'Novel Food Variant Admin',
    flattenedDisplayName: 'Novel Food Variant Admin',
    icon: 'mdi-account-cowboy-hat',
    filterDescription: 'will provide a link to django admin',
    tooltipDescription: 'will provide a link to django admin',
    showInFilters: false
  }
}
